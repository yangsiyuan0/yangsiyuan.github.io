<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git工作流</title>
    <url>/2019/10/24/Git%E5%B7%A5%E4%BD%9C%E6%B5%81/</url>
    <content><![CDATA[<h1 id="一-分支管理"><a href="#一-分支管理" class="headerlink" title="一.分支管理"></a>一.分支管理</h1><p>开发过程中主要存在以下分支：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- master</span><br><span class="line">- dev</span><br><span class="line">- hotfix-[问题名称][bug编号]</span><br><span class="line">- feature-[功能名称]</span><br><span class="line">- bugfix-[bug编号]</span><br><span class="line">- refactor-[重构名称]</span><br></pre></td></tr></table></figure>
<h2 id="1-master分支"><a href="#1-master分支" class="headerlink" title="1. master分支"></a>1. master分支</h2><ul>
<li>稳定的可发布版本</li>
<li>由发布人负责管理(合并操作)</li>
<li>不允许提交代码、不允许开发</li>
</ul>
<h2 id="2-dev分支"><a href="#2-dev分支" class="headerlink" title="2. dev分支"></a>2. dev分支</h2><ul>
<li>不稳定分支，功能完整，允许bug</li>
<li>原则上不允许直接在dev分支上进行功能开发，必须新建feature分支进行开发</li>
</ul>
<h2 id="3-hotfix-问题名称-bug编号-分支"><a href="#3-hotfix-问题名称-bug编号-分支" class="headerlink" title="3. hotfix-[问题名称][bug编号]分支"></a>3. hotfix-[问题名称][bug编号]分支</h2><ul>
<li>从master分支创建，横线后面跟上问题名称或者对应的bug编号，仅仅适用于<strong>生产线问题紧急修复</strong>！！！</li>
<li>修复完成，测试通过，合并到master和dev分支上，然后将此分支删除</li>
</ul>
<h2 id="4-feature-功能名称-分支"><a href="#4-feature-功能名称-分支" class="headerlink" title="4. feature-[功能名称]分支"></a>4. feature-[功能名称]分支</h2><ul>
<li>从dev分支创建，横线后跟功能名称，用于新功能开发，每天下班前push提交到远程</li>
<li>开发完成以后，在远程发起向dev分支的合并请求，由指定的CodeReview人员审查通过以后进行合并，并删除该分支</li>
</ul>
<h2 id="5-bugfix-bug编号-分支"><a href="#5-bugfix-bug编号-分支" class="headerlink" title="5. bugfix-[bug编号]分支"></a>5. bugfix-[bug编号]分支</h2><ul>
<li>从dev分支创建，用于修改测试提出的bug，横线后跟bug编号</li>
<li>修复以后，在远程发起向dev分支的合并请求，并指定提交者自身（或其他人）作为CodeReview，合并以后删除该分支</li>
</ul>
<h2 id="6-refactor-重构名称-分支"><a href="#6-refactor-重构名称-分支" class="headerlink" title="6. refactor-[重构名称]分支"></a>6. refactor-[重构名称]分支</h2><ul>
<li>从dev分支创建，用于代码的<strong>重大规模重构</strong>（小规模重构创建feature分支即可）</li>
<li>重构以后，必须经过严格测试通过，才能向dev分支合并</li>
</ul>
<h1 id="二-Commit提交规范"><a href="#二-Commit提交规范" class="headerlink" title="二. Commit提交规范"></a>二. Commit提交规范</h1><h2 id="1-备注格式"><a href="#1-备注格式" class="headerlink" title="1. 备注格式"></a>1. 备注格式</h2><p>[类型描述]，类型如下图所示</p>
<table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">feat</td>
<td align="left">feature,即新开发的功能</td>
</tr>
<tr>
<td align="left">fix</td>
<td align="left">问题修复</td>
</tr>
<tr>
<td align="left">refactor</td>
<td align="left">重构代码</td>
</tr>
<tr>
<td align="left">doc</td>
<td align="left">增加文档(如ReadMe)、注释</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fix:修复身份证含字母X的用户无法注册问题 </span><br><span class="line">fix: 紧急修复生产线用户积分不显示的问题 </span><br><span class="line">feat:商品详情页功能 </span><br><span class="line">doc:增加项目readme文档，修改结算条款结算逻辑的注释</span><br></pre></td></tr></table></figure>


<h2 id="2-提交频率"><a href="#2-提交频率" class="headerlink" title="2. 提交频率"></a>2. 提交频率</h2><ol>
<li>每天下班前必须提交feature分支，并push到远程</li>
<li>hotfix、feature、bugfix、refactor分支尽量按照功能点或修复重构的问题及时commit（不要求push）<br><img src="https://raw.githubusercontent.com/yangsiyuan0/GitPic/master/evernote/git%E6%8F%90%E4%BA%A4%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt=""></li>
</ol>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>基于SpringBoot的服务监控与健康检查</title>
    <url>/2019/10/24/%E5%9F%BA%E4%BA%8ESpringBoot%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7%E4%B8%8E%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5/</url>
    <content><![CDATA[<h2 id="一-前言"><a href="#一-前言" class="headerlink" title="一. 前言"></a>一. 前言</h2><p>Prometheus是参考Google监控系统实现的新一代多维度指标实时监控告警系统，为满足大型项目的应用服务监控的需求。<br>Actuator 是 Spring Boot 提供的对应用系统的自省和监控的集成功能，可以查看应用配置的详细信息，例如自动化配置信息、创建的 Spring beans 以及一些环境属性等</p>
<h2 id="二-技术栈简介"><a href="#二-技术栈简介" class="headerlink" title="二. 技术栈简介"></a>二. 技术栈简介</h2><h3 id="1-Prometheus"><a href="#1-Prometheus" class="headerlink" title="1. Prometheus"></a>1. Prometheus</h3><p>Prometheus可以与Grafana监控展现系统无缝集成，可以灵活满足多种自定义的监控需求，提供灵活可配且强大的可视化界面。<br><img src="/images/Prometheus%E7%95%8C%E9%9D%A2.png" alt=""></p>
<h3 id="2-Actuator"><a href="#2-Actuator" class="headerlink" title="2. Actuator"></a>2. Actuator</h3><p>Actuator作为springboot的Starter POMs中提供的一个特殊依赖模块，极易在springBoot项目中集成，自动为应用构建了一系列用于监控的端点，同时在其他springCloud组件时会对其进行自动扩展(比如在Eurake为/health端点扩展了指标)，因此推荐在SpringBoot项目中引入，其相关监控信息以json数据呈现。<br><img src="/images/actuator%E4%BF%A1%E6%81%AF.png" alt=""></p>
<h2 id="三-在项目中的实践"><a href="#三-在项目中的实践" class="headerlink" title="三. 在项目中的实践"></a>三. 在项目中的实践</h2><h3 id="1-springBoot项目集成Prometheus"><a href="#1-springBoot项目集成Prometheus" class="headerlink" title="1. springBoot项目集成Prometheus"></a>1. springBoot项目集成Prometheus</h3><h4 id="1-引入maven依赖"><a href="#1-引入maven依赖" class="headerlink" title="1). 引入maven依赖"></a>1). 引入maven依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 健康监控 Prometheus --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.prometheus<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>simpleclient_servlet<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.prometheus<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>simpleclient_spring_boot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.prometheus<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>simpleclient_hotspot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-启动类注解开启默认端点"><a href="#2-启动类注解开启默认端点" class="headerlink" title="2). 启动类注解开启默认端点"></a>2). 启动类注解开启默认端点</h4><p>springBoot项目在启动类上增加@EnablePrometheusEndpoin注解即可开启端点；<br>在启动类主方法上增加DefaultExports.initialize(); 可以实现JVM数据监控。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnablePrometheusEndpoint</span></span><br><span class="line"><span class="meta">@ServletComponentScan</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		DefaultExports.initialize(); <span class="comment">//开启JVM监控</span></span><br><span class="line">		SpringApplication.run(Application.class, args);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-实现核心服务耗时直方图监控指标"><a href="#3-实现核心服务耗时直方图监控指标" class="headerlink" title="3). 实现核心服务耗时直方图监控指标"></a>3). 实现核心服务耗时直方图监控指标</h4><p>该功能建议在gateway中实现，各个服务通过路由路径进行访问。具体通过新增指标过滤器实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span>: regisPrometheusMetricsFilter  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ysy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 【用于监控模块Prometheus】  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> FilterRegistrationBean    返回类型  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019年4月23日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">FilterRegistrationBean <span class="title">regisPrometheusMetricsFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Filter prometheusMetricsFilter = <span class="keyword">new</span> MetricsFilter(<span class="string">"http_request_duration_seconds"</span>,</span><br><span class="line">            <span class="string">"Prometheus MetricsFilter http request duration(seconds)"</span>,</span><br><span class="line">            <span class="keyword">new</span> Integer(<span class="number">5</span>),<span class="comment">//pathComponents level</span></span><br><span class="line">            <span class="keyword">null</span>);</span><br><span class="line">    FilterRegistrationBean prometheusFilterReg = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">    prometheusFilterReg.setFilter(prometheusMetricsFilter);</span><br><span class="line">    prometheusFilterReg.setName(<span class="string">"prometheusMetricsFilter"</span>);</span><br><span class="line">    prometheusFilterReg.addUrlPatterns(<span class="string">"/*"</span>);</span><br><span class="line">    prometheusFilterReg.setOrder(Ordered.HIGHEST_PRECEDENCE);</span><br><span class="line">    <span class="keyword">return</span> prometheusFilterReg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-服务基本健康状态监控-自定义"><a href="#4-服务基本健康状态监控-自定义" class="headerlink" title="4). 服务基本健康状态监控[自定义]"></a>4). 服务基本健康状态监控[自定义]</h4><p>该功能通过后台线程的形式对<strong>自定义</strong>的健康状态指标进行更新，指标更新的工具类已由门户封装工具类MyServiceStatus，指标的更新拟有门户提供spring-task任务进行实时更新，建议各个服务启动时设置自身健康状态为healthy，具体健康状态有三种：</p>
<ul>
<li>HEALTHY：1</li>
<li>ERROR：-1</li>
<li>WARNING：0</li>
</ul>
<h5 id="i-健康状态监控工具类MyServiceStatus"><a href="#i-健康状态监控工具类MyServiceStatus" class="headerlink" title="i. 健康状态监控工具类MyServiceStatus"></a>i. 健康状态监控工具类MyServiceStatus</h5><p>基于Gauge，封装一个健康状态操作工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ysy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 用于prometheus状态监控</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServiceStatus</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ZHIXIN_APPCODE = <span class="string">"ZHIXIN"</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ZHIXIN_APPCODE_ALL = <span class="string">"ZHIXIN_ALL"</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PORTAL_APPCODE = <span class="string">"dyportalserver"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String RELEASE_APPCODE = <span class="string">"dyreleaseserver"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String WECAHT_APPCODE = <span class="string">"dywechatserver"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CMS_APPCODE = <span class="string">"dywebpageserver"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MICROBLOG_APPCODE = <span class="string">"dymicroblogserver"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CFB_APPCODE = <span class="string">"dycfbserver"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String COMMAND_APPCODE = <span class="string">"newscommand"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TV_APPCODE = <span class="string">"dynewsserver"</span>;</span><br><span class="line">    <span class="comment">// 自定义Gauge对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Gauge status = Gauge.build()</span><br><span class="line">            .name(<span class="string">"service_status"</span>)</span><br><span class="line">            .help(<span class="string">"service status"</span>)</span><br><span class="line">            .labelNames(<span class="string">"module"</span>,<span class="string">"submodule"</span>,<span class="string">"description"</span>).register();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 健康状态常量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">double</span> HEALTHY = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">double</span> ERROR = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">double</span> WARNING = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置某个模块的监控状态，支持多线程并发调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subModuleName  模块名称</span></span><br><span class="line"><span class="comment">     *                       至少要支持一个模块，该模块名称与该服务名称一致，如"creapi"</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> healthStatus  模块健康状态</span></span><br><span class="line"><span class="comment">     *                       1: Health</span></span><br><span class="line"><span class="comment">     *                       -1: Error</span></span><br><span class="line"><span class="comment">     *                       -0: Warning</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setHealthStatus</span><span class="params">(String subModuleName, <span class="keyword">double</span> healthStatus)</span></span>&#123;</span><br><span class="line">	   <span class="keyword">if</span>(PORTAL_APPCODE.equals(subModuleName))&#123;</span><br><span class="line">		   status.labels(ZHIXIN_APPCODE,subModuleName,<span class="string">"采编门户"</span>).set(healthStatus); </span><br><span class="line">	   &#125;</span><br><span class="line">	   <span class="keyword">if</span>(RELEASE_APPCODE.equals(subModuleName))&#123;</span><br><span class="line">		   status.labels(ZHIXIN_APPCODE,subModuleName,<span class="string">"通稿稿件"</span>).set(healthStatus); </span><br><span class="line">	   &#125;</span><br><span class="line">	   <span class="keyword">if</span>(WECAHT_APPCODE.equals(subModuleName))&#123;</span><br><span class="line">		   status.labels(ZHIXIN_APPCODE,subModuleName,<span class="string">"微信稿件"</span>).set(healthStatus); </span><br><span class="line">	   &#125;</span><br><span class="line">	   <span class="keyword">if</span>(CMS_APPCODE.equals(subModuleName))&#123;</span><br><span class="line">		   status.labels(ZHIXIN_APPCODE,subModuleName,<span class="string">"网页稿件"</span>).set(healthStatus); </span><br><span class="line">	   &#125;</span><br><span class="line">	   <span class="keyword">if</span>(MICROBLOG_APPCODE.equals(subModuleName))&#123;</span><br><span class="line">		   status.labels(ZHIXIN_APPCODE,subModuleName,<span class="string">"微博稿件"</span>).set(healthStatus); </span><br><span class="line">	   &#125;</span><br><span class="line">	   <span class="keyword">if</span>(CFB_APPCODE.equals(subModuleName))&#123;</span><br><span class="line">		   status.labels(ZHIXIN_APPCODE,subModuleName,<span class="string">"文件库"</span>).set(healthStatus); </span><br><span class="line">	   &#125;</span><br><span class="line">	   <span class="keyword">if</span>(COMMAND_APPCODE.equals(subModuleName))&#123;</span><br><span class="line">		   status.labels(ZHIXIN_APPCODE,subModuleName,<span class="string">"指挥调度"</span>).set(healthStatus); </span><br><span class="line">	   &#125;</span><br><span class="line">	   <span class="keyword">if</span>(TV_APPCODE.equals(subModuleName))&#123;</span><br><span class="line">		   status.labels(ZHIXIN_APPCODE,subModuleName,<span class="string">"电视稿件"</span>).set(healthStatus); </span><br><span class="line">	   &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Title</span>: setSummaryHealthStatus  </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span>: ysy</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: 【设置智新服务中的健康状态】  </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> void    返回类型  </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@date</span> 2019年5月14日</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setSummaryHealthStatus</span><span class="params">(<span class="keyword">double</span> healthStatus)</span></span>&#123;</span><br><span class="line"><span class="comment">//	   Gauge summaryStatus = Gauge.build().name("service_status").help("service status").labelNames("module").register();</span></span><br><span class="line">	   status.labels(ZHIXIN_APPCODE,ZHIXIN_APPCODE_ALL,<span class="string">"采编平台"</span>).set(healthStatus);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Title</span>: inspectService  </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span>: ysy</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: 【获取服务的健康状态】  </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> boolean    返回类型  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@date</span> 2019年5月13日</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">monitorInspect</span><span class="params">(String serviceUrl)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">	   <span class="keyword">boolean</span> checkActive = checkActive(serviceUrl);</span><br><span class="line">   		<span class="keyword">return</span> checkActive;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkActive</span><span class="params">(String cmeditAddress)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="comment">// 1、参数校验</span></span><br><span class="line">       <span class="keyword">if</span>(DyStringUtils.isEmpty(cmeditAddress))&#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"服务地址为空！"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 2、拼接请求接口完整地址</span></span><br><span class="line">       String url = DyStringUtils.combineUrl(cmeditAddress, Constants.CHECK_SERVICE_INTERFACE);</span><br><span class="line">       <span class="comment">// 3.1 封装请求头</span></span><br><span class="line">       Map&lt;String, String&gt; postHeader = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">       <span class="comment">// 3.2 封装请求体</span></span><br><span class="line">       NameValuePair[] parametersBody = <span class="keyword">new</span> NameValuePair[<span class="number">1</span>];</span><br><span class="line">       parametersBody[<span class="number">0</span>] = <span class="keyword">new</span> NameValuePair(<span class="string">"count"</span>, <span class="string">"11"</span>);</span><br><span class="line">       <span class="comment">// 4、调用接口返回结果</span></span><br><span class="line">       JSONObject paramJson = <span class="keyword">new</span> JSONObject();</span><br><span class="line">       String result = HttpClientUtil.HttpClientPost(url, paramJson.toString(), parametersBody, postHeader);</span><br><span class="line">       <span class="comment">// 5、解析返回的结果</span></span><br><span class="line">       <span class="keyword">if</span> (DyStringUtils.isNotEmpty(result) &amp;&amp; DyStringUtils.isJson(result)) &#123;</span><br><span class="line">        <span class="comment">// 获取数据</span></span><br><span class="line">           JSONObject json = JSONObject.fromObject(result);</span><br><span class="line">           <span class="keyword">return</span> json.getBoolean(<span class="string">"status"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="ii-定时任务监控子模块健康状态"><a href="#ii-定时任务监控子模块健康状态" class="headerlink" title="ii. 定时任务监控子模块健康状态"></a>ii. 定时任务监控子模块健康状态</h5><p>该定时任务，建议在gateway中实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ysy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 更新应用状态任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Conditional</span>(value = &#123; PrometheusCondition.class &#125;) <span class="comment">//使用策略模式控制开关</span></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"prometheusStatusCheckEngineer"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrometheusStatusCheckEngineer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(PrometheusStatusCheckEngineer.class);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PORTAL_APPCODE = <span class="string">"portalserver"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String RELEASE_APPCODE = <span class="string">"releaseserver"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String WECAHT_APPCODE = <span class="string">"wechatserver"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CMS_APPCODE = <span class="string">"webpageserver"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MICROBLOG_APPCODE = <span class="string">"microblogserver"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CFB_APPCODE = <span class="string">"cfbserver"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String COMMAND_APPCODE = <span class="string">"commandserver"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TV_APPCODE = <span class="string">"newsserver"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] APP_LIST = &#123;PORTAL_APPCODE,</span><br><span class="line">            RELEASE_APPCODE,WECAHT_APPCODE,CMS_APPCODE,</span><br><span class="line">            MICROBLOG_APPCODE,TV_APPCODE,CFB_APPCODE,COMMAND_APPCODE&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ZuulProperties zuulProperties;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"0/30 * * * * ?"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	    logger.info(<span class="string">"----------更新任务状态线程启动-------"</span>);</span><br><span class="line">	    <span class="keyword">double</span> summaryStatus = APP_LIST.length;</span><br><span class="line">	    <span class="keyword">boolean</span> portalStatus = <span class="keyword">false</span>;</span><br><span class="line">	    <span class="keyword">for</span> (String appContext : APP_LIST) &#123;</span><br><span class="line">	        <span class="keyword">try</span> &#123;</span><br><span class="line">	        	Map&lt;String, ZuulRoute&gt; routes = zuulProperties.getRoutes();</span><br><span class="line">	        	ZuulRoute zuulRoute = routes.get(appContext);</span><br><span class="line">	        	String url = zuulRoute.getUrl();</span><br><span class="line">	        	logger.info(<span class="string">"url地址：【"</span> + url + <span class="string">"】"</span>);</span><br><span class="line">	        	<span class="keyword">if</span>(COMMAND_APPCODE.equals(appContext))&#123;</span><br><span class="line">	        		appContext = <span class="string">"newscommand"</span>;</span><br><span class="line">	        	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	        		appContext = <span class="string">"dy"</span>+appContext;</span><br><span class="line">	        	&#125;</span><br><span class="line">	            <span class="keyword">boolean</span> monitorInspect = MyServiceStatus.monitorInspect(url);</span><br><span class="line">	            <span class="keyword">if</span>(monitorInspect)&#123;</span><br><span class="line">	                MyServiceStatus.setHealthStatus(appContext, MyServiceStatus.HEALTHY);</span><br><span class="line">	                <span class="keyword">if</span>(<span class="string">"dyportalserver"</span>.equals(appContext))&#123;</span><br><span class="line">	                	portalStatus = <span class="keyword">true</span>;</span><br><span class="line">	                &#125;</span><br><span class="line">	            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	                MyServiceStatus.setHealthStatus(appContext, MyServiceStatus.WARNING);</span><br><span class="line">	                summaryStatus --;</span><br><span class="line">	            &#125;</span><br><span class="line">	            <span class="keyword">if</span>(summaryStatus == <span class="number">0</span> || !portalStatus)&#123;</span><br><span class="line">	            	MyServiceStatus.setSummaryHealthStatus(MyServiceStatus.ERROR);</span><br><span class="line">	            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(summaryStatus == APP_LIST.length)&#123;</span><br><span class="line">	            	MyServiceStatus.setSummaryHealthStatus(MyServiceStatus.HEALTHY);</span><br><span class="line">	            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">	            	MyServiceStatus.setSummaryHealthStatus(MyServiceStatus.WARNING);</span><br><span class="line">	            &#125;</span><br><span class="line">	        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">	            logger.info(<span class="string">"检测【"</span>+appContext+<span class="string">"】健康状态异常"</span>);</span><br><span class="line">	            MyServiceStatus.setHealthStatus(appContext,MyServiceStatus.ERROR);</span><br><span class="line">	        &#125;</span><br><span class="line">	    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-访问URL获取监控数据"><a href="#5-访问URL获取监控数据" class="headerlink" title="5). 访问URL获取监控数据"></a>5). 访问URL获取监控数据</h4><p>访问<a href="http://ip:port/项目上下文/prometheus，就会返回Prometheus格式的指标监控信息" target="_blank" rel="noopener">http://ip:port/项目上下文/prometheus，就会返回Prometheus格式的指标监控信息</a><br>一个示例：<code>http://10.10.0.120:9010/gateway/prometheus</code></p>
<h3 id="2-springBoot项目集成Actuator"><a href="#2-springBoot项目集成Actuator" class="headerlink" title="2. springBoot项目集成Actuator"></a>2. springBoot项目集成Actuator</h3><h4 id="1-引入maven依赖-1"><a href="#1-引入maven依赖-1" class="headerlink" title="1). 引入maven依赖"></a>1). 引入maven依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 健康检查 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="2-apploication文件配置"><a href="#2-apploication文件配置" class="headerlink" title="2). apploication文件配置"></a>2). apploication文件配置</h4><ul>
<li>SpringBoot1.x的配置<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">######################## 健康检查配置   ########################</span></span><br><span class="line"><span class="comment">#关闭安全认证</span></span><br><span class="line"><span class="string">management.security.enabled=false</span></span><br><span class="line"><span class="comment">#修改访问路径  2.0之前默认是/2.0默认是 /actuator  可以通过这个属性值修改  </span></span><br><span class="line"><span class="string">management.context-path=/monitor</span></span><br></pre></td></tr></table></figure></li>
<li>SpringBoot2.x的配置<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">######################## 健康检查配置   ########################</span></span><br><span class="line"><span class="comment">#关闭安全认证</span></span><br><span class="line"><span class="comment">#management.security.enabled=false</span></span><br><span class="line"><span class="string">spring.application.name=gateway</span></span><br><span class="line"><span class="string">management.endpoints.web.exposure.include=*</span></span><br><span class="line"><span class="string">management.metrics.tags.application=$&#123;spring.application.name&#125;</span></span><br><span class="line"><span class="string">management.metrics.export.atlas.enabled=true</span></span><br><span class="line"><span class="string">management.metrics.export.prometheus.enabled=true</span></span><br><span class="line"><span class="string">management.endpoints.web.base-path=/actuator</span></span><br><span class="line"><span class="string">management.endpoint.health.show-details=always</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="3-自定义监控数据"><a href="#3-自定义监控数据" class="headerlink" title="3). 自定义监控数据"></a>3). 自定义监控数据</h4><p>通过在application-*.properties中增加配置项，实现对相关配置项进行前端显示，以便在生产环境简单地检测是否存在配置错误的情况，配置项以info.作为前缀</p>
<ul>
<li><p>从pom中获取项目元数据</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">info.build.name=@project.name@</span></span><br><span class="line"><span class="string">info.build.description=@project.description@</span></span><br><span class="line"><span class="string">info.build.version=@project.version@</span></span><br><span class="line"><span class="string">info.build.groupId=@project.groupId@</span></span><br><span class="line"><span class="string">info.build.artifactId=@project.artifactId@</span></span><br><span class="line"><span class="string">info.build.spring-boot-version=@project.parent.version@</span></span><br><span class="line"><span class="string">info.build.java-version=@java.version@</span></span><br><span class="line"><span class="string">info.build.user-home=@user.home@</span></span><br><span class="line"><span class="string">info.build.source-encoding=@project.build.sourceEncoding@</span></span><br><span class="line"><span class="string">info.build.output-encoding=@project.reporting.outputEncoding@</span></span><br><span class="line"><span class="string">info.build.buidTimestamp=@maven.build.timestamp@</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置properties文件中的配置项</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">info.config.description =基础配置</span><br><span class="line">info.config.version =$&#123;version&#125;</span><br><span class="line">info.config.profilesActive=$&#123;spring.profiles.active&#125;</span><br><span class="line">info.config.casServerUrlPrefix=$&#123;casServerUrlPrefix&#125;</span><br><span class="line">info.config.enablePrometheus=$&#123;gateway.prometheus&#125;</span><br><span class="line">info.filter.api.description=api加密过滤器状态</span><br><span class="line">info.filter.api.enable=$&#123;dyportalserver.enableApiFilter&#125;</span><br><span class="line">info.filter.api.filterPattern=$&#123;dyportalserver.apiFilterPattern&#125;</span><br><span class="line">info.filter.api.ignorePattern=$&#123;dyportalserver.apiIgnorePattern&#125;</span><br><span class="line">info.filter.cas.description=cas过滤器状态</span><br><span class="line">info.filter.cas.enable=$&#123;dyportalserver.enableCasFilter&#125;</span><br><span class="line">info.filter.cas.filterPattern=$&#123;dyportalserver.casFilterPattern&#125;</span><br><span class="line">info.filter.cas.ignorePattern=$&#123;dyportalserver.casIgnorePattern&#125;</span><br><span class="line">info.mq.description=消息中间件配置</span><br><span class="line">info.mq.enable=$&#123;gateway.rabbitmq&#125;</span><br><span class="line">info.mq.virtual-host=$&#123;spring.rabbitmq.virtual-host&#125;</span><br><span class="line">info.mq.addresses=$&#123;spring.rabbitmq.addresses&#125;</span><br><span class="line">info.mq.queueTv=$&#123;spring.rabbitmq.queueTv&#125;</span><br><span class="line">info.mq.queueRelease=$&#123;spring.rabbitmq.queueRelease&#125;</span><br><span class="line">info.mq.queueMicroblo=$&#123;spring.rabbitmq.queueMicroblo&#125;</span><br><span class="line">info.mq.queueMicroblo=$&#123;spring.rabbitmq.queueMicroblo&#125;</span><br><span class="line">info.mq.queueWechat=$&#123;spring.rabbitmq.queueWechat&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="4-访问URL获取监控数据"><a href="#4-访问URL获取监控数据" class="headerlink" title="4). 访问URL获取监控数据"></a>4). 访问URL获取监控数据</h4><blockquote>
<ul>
<li>/info：该端点用来返回一些应用自定义的信息</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>/beans：该端点用来获取应用上下文中创建的所有Bean</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>/autoconfig：该端点用来获取应用的自动化配置报告，其中包括所有自动化配置的候选项</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>/env：该端点与/configprops不同，它用来获取应用所有可用的环境属性报告</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>/mappings：该端点用来返回所有Spring MVC的控制器映射关系报告</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>/configprops：该端点用来获取应用中配置的属性信息报告</li>
</ul>
</blockquote>
<h2 id="四-FAQ"><a href="#四-FAQ" class="headerlink" title="四. FAQ"></a>四. FAQ</h2><h3 id="1-Prometheus项目默认的端点没有数据"><a href="#1-Prometheus项目默认的端点没有数据" class="headerlink" title="1. Prometheus项目默认的端点没有数据"></a>1. Prometheus项目默认的端点没有数据</h3><p>数据通过调用服务的query_range端口获取，检查这个路径是否被api加密过滤器或其他全局前置过滤器拦截。</p>
<h3 id="2-监控数据被暴露出来是否有安全问题"><a href="#2-监控数据被暴露出来是否有安全问题" class="headerlink" title="2. 监控数据被暴露出来是否有安全问题"></a>2. 监控数据被暴露出来是否有安全问题</h3><p>确实有上述问题，因此一方面可以引入安全控制的依赖spring-boot-start-security，实现访问控制端点时均需要验证。另一方面，需要谨慎暴露明码的项目敏感信息</p>
<h3 id="3-集成Prometheus之后出现热部署启动异常"><a href="#3-集成Prometheus之后出现热部署启动异常" class="headerlink" title="3. 集成Prometheus之后出现热部署启动异常"></a>3. 集成Prometheus之后出现热部署启动异常</h3><p>目前测试中发现有该问题，尚未解决</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>springCloud</tag>
        <tag>prometheus</tag>
        <tag>actuator</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>利用SpringSession实现分布式系统的跨域共享session</title>
    <url>/2019/10/24/%E5%88%A9%E7%94%A8SpringSession%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%B7%A8%E5%9F%9F%E5%85%B1%E4%BA%ABsession/</url>
    <content><![CDATA[<h2 id="一-前言"><a href="#一-前言" class="headerlink" title="一. 前言"></a>一. 前言</h2><p>在Web项目开发中，会话管理是一个很重要的部分，用于存储与用户相关的数据。通常是由符合session规范的容器来负责存储管理，这也意味着一旦容器关闭、重启，会导致会话失效（在tomcat中，由每个context容器内的Manager对象来管理session）。</p>
<p>目前，流行的分布式架构下，出现了跨服务器无法共享session的问题。对此，通常的解决方案为，利用redis、JDBC等存储介质，实现session数据的持久化，进而实现分布式会话管理，具体而言，分为如下三种：</p>
<blockquote>
<ol>
<li>使用容器扩展来实现：比如基于Tomcat的tomcat-redis-session-manager，基于Jetty的jetty-session-redis</li>
</ol>
</blockquote>
<blockquote>
<ol start="2">
<li>自己实现会话管理的工具类(包括Session管理和Cookie管理)：在需要使用会话的时候都从自己的工具类中获取，而工具类后端存储可以放到Redis中【快融当前采信的方式】</li>
</ol>
</blockquote>
<blockquote>
<ol start="3">
<li>使用框架的会话管理工具：即本文中的springSession，基于spring框架，利用spring-data-redis连接池，替换servlet中的会话管理，实现脱离容器而不用改变代码</li>
</ol>
</blockquote>
<h2 id="二-Spring-session简介"><a href="#二-Spring-session简介" class="headerlink" title="二. Spring-session简介"></a>二. Spring-session简介</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h3><p>简而言之，spring Session 提供了 一套API 和实现，用于管理用户的 Session 信息，基于此概念，其具有如下特性：</p>
<blockquote>
<ul>
<li>Session持久化在外部存储介质中，通过配置自行切换(redis,mongo, Apache Geode)</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>控制 sessionid 如何在客户端和服务器之间进行交换，便于编写 Restful API (从 HTTP 头信息中获取 sessionid ，而不必再依赖于 cookie)</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>非 Web 请求的处理代码中，能够访问 session 数据</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>支持每个浏览器上使用多个 session<br><img src="/images/springSessionFeature.png" alt=""></li>
</ul>
</blockquote>
<h3 id="2-模块"><a href="#2-模块" class="headerlink" title="2. 模块"></a>2. 模块</h3><p>Spring-session具体提供了如下四个模块：<br> <img src="/images/springSessionModule.png" alt=""></p>
<h3 id="3-关键接口-类"><a href="#3-关键接口-类" class="headerlink" title="3. 关键接口/类"></a>3. 关键接口/类</h3><p>实现session管理器的时候，有两个必须要解决的核心问题：如何(利用外部存储介质)构建集群环境下高可用的session，对于传入的请求该如何确定该用哪个session实例。归根结底，关键问题在于sessionId如何传递？？？</p>
<blockquote>
<ol>
<li>针对第一个问题，Spring Session定义了一组标准的接口，可以通过实现这些接口间接访问底层的数据存储：<ul>
<li>org.springframework.session.Session<br>  <code>定义了session的基本功能：设置、移除属性(该接口并不关心具体存储介质)，因此具有比servletHttpSession更广泛的应用场景</code></li>
<li>org.springframework.session.ExpiringSession<br>  <code>session接口的扩展，提供判断session是否过期(一个典型的实现类RedisSession)</code></li>
<li>org.springframework.session.SessionRepository<br>  <code>定义了创建、保存、删除以及检索session的方法，将Session实例真正保存到数据存储的逻辑是在这个接口的实现中编码完成的(一个典型的实现类RedisOperationsSessionRepository)</code></li>
</ul>
</li>
</ol>
</blockquote>
<blockquote>
<ol start="2">
<li>针对第二个问题，就HTTP协议而言， Spring Session定义了一个接口两个默认实现类：<ul>
<li>HttpSessionStrategy接口</li>
<li>CookieHttpSessionStrategy实现类(使用cookie将请求与session id关联)</li>
<li>HeaderHttpSessionStrategy实现类(使用header将请求与session id关联)</li>
</ul>
</li>
</ol>
</blockquote>
<blockquote>
<ol start="3">
<li>相关包装类(实现对http的支持)<ul>
<li>SessionRepositoryRequestWrapper</li>
<li>SessionRepositoryResponseWrapper<br><code>Spring-session对HTTP的支持是通过标准的servlet filter来实现的，这个filter必须要配置为拦截所有的web应用请求，并且它应该是filter链中的第一个filter。Spring Session filter会确保随后调用javax.servlet.http.HttpServletRequest的getSession()方法时，都会返回Spring Session的HttpSession实例，而不是应用服务器默认的HttpSession</code></li>
</ul>
</li>
</ol>
</blockquote>
<blockquote>
<ol start="4">
<li>过滤器<ul>
<li>SessionRepositoryFilter<br><code>通过实现ServletFilter接口，创建3)中请求与响应对象，然后调用其余的filter，实现获得的session对象均为springsession的实例</code></li>
</ul>
</li>
</ol>
</blockquote>
<h3 id="4-生命周期"><a href="#4-生命周期" class="headerlink" title="4. 生命周期"></a>4. 生命周期</h3><h4 id="4-1-创建session"><a href="#4-1-创建session" class="headerlink" title="4.1 创建session"></a>4.1 创建session</h4><p>RedisSession 在创建时设置 3 个变量 creationTime ，maxInactiveInterval ，lastAccessedTime</p>
<h4 id="4-2-获取session"><a href="#4-2-获取session" class="headerlink" title="4.2 获取session"></a>4.2 获取session</h4><p>应用通过getSession(boolean create)方法来获取session数据【create 表示 session 不存在时是否创建新的 session】，具体步骤如下：</p>
<ul>
<li>getSession方法首先请求的.CURRENT_SESSION属性来获取 currentSession</li>
<li>获取不到，则从 request 取出sessionId【该步骤依赖具体的 HttpSessionStrategy 的实现】</li>
<li>然后读取 spring:session:sessions:[sessionId] 的值，同时根据 lastAccessedTime 和 MaxInactiveIntervalInSeconds 来判断这个 session 是否过期。</li>
<li>如果request中没有sessionId ，说明该用户是第一次访问，会根据不同的实现来创建一个新的 session</li>
</ul>
<h4 id="4-3-删除session"><a href="#4-3-删除session" class="headerlink" title="4.3 删除session"></a>4.3 删除session</h4><p>spring session在访问有效期内，每一次访问都会更新 lastAccessedTime 的值，过期时间为lastAccessedTime + maxInactiveInterval ，也即在有效期内每访问一次，有效期就向后延长 maxInactiveInterval，对于过期数据，一般有如下三种删除策略</p>
<ul>
<li>定时删除: 即在设置键的过期时间的同时，创建一个定时器， 当键的过期时间到来时，立即删除。</li>
<li>惰性删除，即在访问键的时候，判断键是否过期，过期则删除，否则返回该键值</li>
<li>定期删除，即每隔一段时间，程序就对数据库进行一次检查，删除里面的过期键。至于要删除多少过期键，以及要检查多少个数据库，则由算法决定</li>
</ul>
<h3 id="5-Spring-session在-redis中的数据结构"><a href="#5-Spring-session在-redis中的数据结构" class="headerlink" title="5. Spring-session在 redis中的数据结构"></a>5. Spring-session在 redis中的数据结构</h3><ul>
<li>SET 类型的spring:session:expireations：<br>min 表示从 1970 年 1 月 1 日 0 点 0 分经过的分钟数， SET 集合的 member 为 expires:[sessionId] ,表示 members 会在 min 分钟后过期</li>
<li>String 类型的spring:session:sessions:expires:[sessionId]：<br>该数据的 TTL 表示 sessionId 过期的剩余时间，即 maxInactiveInterval</li>
<li>Hash 类型的spring:session:sessions:[sessionId]：<br>session 保存的数据，记录了 creationTime，maxInactiveInterval，lastAccessedTime，attribute。前两个数据是用于 session 过期管理的辅助数据结构<h3 id="6-注意事项"><a href="#6-注意事项" class="headerlink" title="6.注意事项"></a>6.注意事项</h3></li>
<li>spring-session 要求 Redis 版本在2.8及以上</li>
<li>默认情况下，session 存储在 redis 的 key 是“spring:session::”，但如果有多个系统同时使用一个 redis，则会冲突，此时应该配置 redisNamespace 值</li>
<li>如果想在 session 中保存一个对象，必须实现了 Serializable接口</li>
<li>session 的域不同会生成新的 session 的，需进行网关代理、负载均衡、或者自定义HttpSessionStrategy策略并进行跨域处理</li>
</ul>
<h2 id="三-Spring-session在项目中的实践"><a href="#三-Spring-session在项目中的实践" class="headerlink" title="三. Spring-session在项目中的实践"></a>三. Spring-session在项目中的实践</h2><h3 id="1-引入POM依赖"><a href="#1-引入POM依赖" class="headerlink" title="1.引入POM依赖"></a>1.引入POM依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">!—注意Spring</span> <span class="attr">Boot</span>版本 <span class="attr">--</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-添加application配置项"><a href="#2-添加application配置项" class="headerlink" title="2.添加application配置项"></a>2.添加application配置项</h3><p>配置文件application.properties</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">########## springSession相关配置 ##########</span></span><br><span class="line"><span class="comment">#session过期时间(秒)</span></span><br><span class="line"><span class="string">spring.session.store-type=redis</span></span><br><span class="line"><span class="comment"># session最大超时时间(分钟)，默认为30</span></span><br><span class="line"><span class="string">【如果新建了RedisSessionConfig类，该项配置失效，需在配置类上以注解形式配置过期时间】</span></span><br><span class="line"><span class="string">server.session.timeout=60</span></span><br></pre></td></tr></table></figure>
<h3 id="3-添加配置类"><a href="#3-添加配置类" class="headerlink" title="3.添加配置类"></a>3.添加配置类</h3><ul>
<li>基本配置，配置类开启Redis Http Session</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableRedisHttpSession  //开启redisHttpSession</span><br><span class="line">public class HttpSessionConfig &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>进阶配置：</p>
</li>
<li><p>由于快融前端项目存在跨域情况，默认的方式sessionId获取为null，导致每次生成全新的session对象，需配置 自定义的 CookieSerializer 来指定配置信息：</p>
</li>
<li><p>MyDefaultSessionCookieConfig：自定义CookieSerializer 所有配置项</p>
</li>
<li><p>HttpSessionConfig：自定义sessionId获取策略(快融项目中基于cookie策略)</p>
</li>
</ul>
<h3 id="4-设置过滤器"><a href="#4-设置过滤器" class="headerlink" title="4. 设置过滤器"></a>4. 设置过滤器</h3><p>主要用于兼容快融项目当前的redis管理用户信息方式，保持portalkey管理的用信息的生命周期，与session同步【具体参见ApiOriginFilter类】</p>
<h3 id="4-前端处理"><a href="#4-前端处理" class="headerlink" title="4. 前端处理"></a>4. 前端处理</h3><p>前端处理主要分为两部分 (对封装的公共ajaxRequest进行修改)：</p>
<ul>
<li>ajax跨域允许携带cookie：withCredentials属性</li>
<li>ajax中ession过期的后处理：dataFilter方法</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">	xhrFields:&#123;<span class="attr">withCredentials</span>:<span class="literal">true</span>&#125;, <span class="comment">//当前请求为跨域类型时是否在请求中协带cookie</span></span><br><span class="line">	url: defaults.url,</span><br><span class="line">	type: defaults.type,</span><br><span class="line">	data: defaults.data,</span><br><span class="line">	<span class="keyword">async</span>: defaults.async,</span><br><span class="line">	cache: defaults.cache,</span><br><span class="line">	dataType: defaults.dataType,</span><br><span class="line">	contentType: defaults.contentType,</span><br><span class="line">	beforeSend: <span class="function"><span class="keyword">function</span> (<span class="params">XHR</span>) </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(defaults.isHaveHeader)&#123;</span><br><span class="line">			XHR.setRequestHeader(<span class="string">"userId"</span>, userId);</span><br><span class="line">			XHR.setRequestHeader(<span class="string">"token"</span>, token);</span><br><span class="line">			XHR.setRequestHeader(<span class="string">"tenantId"</span>, tenantId);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	error: <span class="function"><span class="keyword">function</span> (<span class="params">XMLHttpRequest, textStatus, errorThrown</span>) </span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">"错误信息"</span> + errorThrown.toString());</span><br><span class="line">	&#125;,</span><br><span class="line">	dataFilter: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123; <span class="comment">//监听session过期，清除用户信息，返回登录页</span></span><br><span class="line">		<span class="keyword">if</span>((data.status == <span class="literal">false</span> || data.status == <span class="string">"false"</span>) &amp;&amp; data.msg == <span class="string">"会话过期"</span>)&#123;</span><br><span class="line">			portal.util.alertBox(<span class="string">"会话过期"</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> data;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	success: defaults.success</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="四-FAQ"><a href="#四-FAQ" class="headerlink" title="四. FAQ"></a>四. FAQ</h2><h3 id="1-快融-2-0-3版本-当前基于redis的方式存在什么弊端："><a href="#1-快融-2-0-3版本-当前基于redis的方式存在什么弊端：" class="headerlink" title="1. 快融(2.0.3版本)当前基于redis的方式存在什么弊端："></a>1. 快融(2.0.3版本)当前基于redis的方式存在什么弊端：</h3><ul>
<li>必须自定义代码实现相关redis操作，对业务代码具有侵入性</li>
<li>所有接口调用时，需另外手动调用一次更新redis的接口，增加前端代码负荷</li>
<li>前端必须利用localstorage缓存记住redis的key，由于localstorage的生命周期及作用域问题，导致浏览器关闭再打开用户登录状态仍然保持的问题</li>
</ul>
<h3 id="2-Spring-session在redis中为什么存在三个key："><a href="#2-Spring-session在redis中为什么存在三个key：" class="headerlink" title="2. Spring-session在redis中为什么存在三个key："></a>2. Spring-session在redis中为什么存在三个key：</h3><ul>
<li>Sessions：记录 session 本身的数据</li>
<li>Expires：标记 session 的准确过期时间</li>
<li>expiration ：利用set集合存储一分钟内会过期的Sessions的key, 保证 session 能够被及时删除，spring 监听事件能够被及时处理<br><img src="/images/springSessionRedis.png" alt=""></li>
</ul>
<h3 id="3-为什么利用server-session-timeout配置session过期时间无效"><a href="#3-为什么利用server-session-timeout配置session过期时间无效" class="headerlink" title="3. 为什么利用server.session.timeout配置session过期时间无效"></a>3. 为什么利用server.session.timeout配置session过期时间无效</h3><p>当使用了自定义的RedisSessionConfig类时，session过期时间将以该类注解上的配置为准。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义session过期时间(单位s)</span></span><br><span class="line"><span class="meta">@EnableRedisHttpSession</span>(redisNamespace=<span class="string">"spring:gateway:session:NewsEditing-cas"</span>, maxInstanceIntervalSeconds = <span class="number">60</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpSessionConfig</span> <span class="keyword">implements</span> <span class="title">ApplicationContextWare</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-Session何时进行更新"><a href="#4-Session何时进行更新" class="headerlink" title="4. Session何时进行更新"></a>4. Session何时进行更新</h3><p>Session 的更新由    SessionRepositoryFilter过滤器完成，每次请求均会自动更新session过期时间</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringSession</tag>
        <tag>session</tag>
        <tag>分布式</tag>
        <tag>跨域</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven</title>
    <url>/2019/10/24/Maven/</url>
    <content><![CDATA[<blockquote>
<p><strong>To Do</strong></p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 聚合与继承<ul>
<li><code>对于聚合模块来说，它知道有哪些被聚合的模块，但那些被聚合的模块不知道这个聚合模块的存在</code></li>
<li><code>对于继承关系的父 POM来说，它不知道有哪些子模块继承与它，但那些子模块都必须知道自己的父 POM是什么</code></li>
<li><code>聚合 POM与继承关系中的父POM的 packaging都是pom</code></li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> <a href="http://yongpoliu.com/snapshot-vs-release/" target="_blank" rel="noopener">SNAPSHOT与RELEASE版本之争</a><ul>
<li><code>NAPSHOT依赖泛指以-SNAPSHOT为结尾的版本号</code></li>
<li><code>所有非-SNAPSHOT结尾的版本号则都被认定为RELEASE版本，即正式版</code></li>
<li><code>在开发期间，一般使用SNAPSHOT，在生产期间，更多地依赖RELEASE版本模块</code></li>
</ul>
</li>
<li>私服访问<a href="http://localhost:8081弹框：正在请求您的用户名和密码。该网站称：“XDB”" target="_blank" rel="noopener">http://localhost:8081弹框：正在请求您的用户名和密码。该网站称：“XDB”</a><br><code>oracle安装过程中默认安装了XDB数据库，占用了8081端口，端口冲突</code></li>
</ul>
</blockquote>
<hr>
<h2 id="一-Maven简介"><a href="#一-Maven简介" class="headerlink" title="一. Maven简介"></a>一. Maven简介</h2><blockquote>
<p>Maven 是apache下的开源项目，项目管理工具，管理 java 项目</p>
<ul>
<li>项目对象模型 (Project Object Model)<br><code>POM对象模型，每个maven工程中都有一个pom.xml文件，定义工程所依赖的jar包、本工程的坐标、打包运行方式</code></li>
<li>依赖管理系统（基础核心 )<br><code>maven 通过坐标对项目工程所依赖的jar包统一规范管理</code></li>
<li>maven 定义一套项目生命周期<br><code>清理、初始化、编译、测试、报告 、打包、部署、站点生成</code></li>
<li>一组标准集合<br><code>强调：maven工程有自己标准的工程目录结构、定义坐标有标准</code></li>
<li>maven 管理项目生命周期过程都是基于插件完成的</li>
</ul>
</blockquote>
<h3 id="1-Maven仓库"><a href="#1-Maven仓库" class="headerlink" title="1. Maven仓库"></a>1. Maven仓库</h3><blockquote>
<ul>
<li>中央仓库<br><code>即远程仓库，仓库中jar由专业团队（maven 团队）统一维护：</code>【<a href="http://repo1.maven.org/maven2/" target="_blank" rel="noopener">中央仓库的地址</a>】</li>
<li>本地仓库<br><code>相当于缓存，工程第一次会从远程仓库（互联网）去下载jar包，将jar包存在本地仓库（在程序员的电脑上）,第二次不需要从远程仓库去下载。先从本地仓库找，如果找不到才会去远程仓库找</code></li>
<li>私服<br><code>在公司内部架设一台私服，其它公司架设一台仓库，对外公开</code></li>
</ul>
</blockquote>
<h3 id="2-Maven环境搭建"><a href="#2-Maven环境搭建" class="headerlink" title="2. Maven环境搭建"></a>2. Maven环境搭建</h3><blockquote>
<ul>
<li>本地仓库配置<br><code>打开 maven 的安装目录中 conf/ settings.xml 文件，在这里配置本地仓库</code></li>
</ul>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置本地仓库的目录为 D:\repository_ssh --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\repository_ssh<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="3-Maven入门"><a href="#3-Maven入门" class="headerlink" title="3. Maven入门"></a>3. Maven入门</h3><h4 id="3-1-创建Maven工程"><a href="#3-1-创建Maven工程" class="headerlink" title="3.1 创建Maven工程"></a>3.1 创建Maven工程</h4><blockquote>
<ul>
<li>工程坐标(<code>maven 对所有工程管理基于坐标进行管理</code>)<ul>
<li><code>Group Id：项目的名称，项目名称以域名的倒序</code></li>
<li><code>Artifact Id：模块名称（子项目名称）</code></li>
<li><code>Version：模块的版本，snapshot（快照版，没有正式发行）、release（正式发行版本）</code></li>
<li><code>Packaging：打包方式，jar(普通java项目),pom(pom工程),war(web项目)</code></li>
</ul>
</li>
<li>工程目录结构<ul>
<li><code>/src/main/java 主体程序 java 源文件（不要放配置文件）</code></li>
<li><code>/src/main/resources 主体程序所需要的配置文件（不要放 java 文件）</code></li>
<li><code>/src/test/java 单元测试程序 java 源文件</code></li>
<li><code>/src/test/resources 单元测试程序所用的配置文件</code></li>
<li><code>/target 编译输出目录</code></li>
<li><code>pom.xml Maven 进行工作的主要配置文件</code></li>
</ul>
</li>
</ul>
</blockquote>
<hr>
<h4 id="3-2-设置编译版本"><a href="#3-2-设置编译版本" class="headerlink" title="3.2 设置编译版本"></a>3.2 设置编译版本</h4><blockquote>
<ul>
<li>将maven-compiler-plugin设置为2.3.2版本<br><code>本步骤可以通过右键工程Maven-&gt;add plugin,然后搜索并安装</code></li>
<li>Maven工程默认是JDK1.5，我们需要将编译版本改为JDK1.7 【<code>勿忘</code>】<br><code>本步骤手动添加</code></li>
</ul>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 下述信息配置在pom.xml中【并对Maven工程Update Project】--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="3-3-添加依赖"><a href="#3-3-添加依赖" class="headerlink" title="3.3 添加依赖"></a>3.3 添加依赖</h4><blockquote>
<p>Eclipse：Maven – &gt; Add Dependency【<code>通过下面的搜索框进行模糊搜索</code>】<br><code>经过上述操作，pom.xml会自动增添配置信息；Maven Dependecies目录下会自动增添Jar包（包含依赖包...）</code></p>
</blockquote>
<h3 id="4-Maven命令"><a href="#4-Maven命令" class="headerlink" title="4. Maven命令"></a>4. Maven命令</h3><blockquote>
<p>Maven 有三套相互独立的生命周期，分别是：clean、default、site</p>
<ul>
<li><code>clean 主要是清理项目</code></li>
<li><code>default 是 Maven 最核心的的构建项目</code></li>
<li><code>site 是生成项目站点</code><br><img src="https://raw.githubusercontent.com/yangsiyuan0/GitPic/master/evernote/maven%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt=""></li>
</ul>
</blockquote>
<hr>
<blockquote>
<p>核心命令<br><code>【run as --&gt; maven build(在Goals中输入命令)】</code></p>
<ul>
<li><strong><code>compile</code></strong>：<code>编译</code></li>
<li><strong><code>clean</code></strong>：<code>清理，将 target 下的 class 文件清理</code></li>
<li><strong><code>test</code></strong>：<code>执行单元测试类，执行 src/test/java 下的类</code></li>
<li><strong><code>package</code></strong>：<code>将 java 工程打成 jar、war</code></li>
<li><strong><code>install</code></strong>：<code>安装命令，将将程的 jar 发布到本地仓库发布到仓库，目录按照本工程定义的坐标生成目录</code></li>
<li><strong><code>clean tomcat7:run</code></strong>:<code>清理之前的内容,并启动tomcat7服务器(tomcat默认为6)</code></li>
<li><strong><code>package Dskiptests</code></strong>：<code>跳过测试代码进行打包(避免由于测试代码中有错导致打包不成功)</code><blockquote>
<p><code>其实我们所执行的这些命令是对 maven 原生命令的封装，我们可以在命令提示符下直接通过这些命令来对代码进行编译打包等操作</code></p>
</blockquote>
</li>
</ul>
</blockquote>
<h2 id="二-创建-SSH2-工程-★"><a href="#二-创建-SSH2-工程-★" class="headerlink" title="二. 创建 SSH2 工程(★)"></a>二. 创建 SSH2 工程(★)</h2><blockquote>
<p>用 SSH2 集成框架搭建mavenweb工程，并以war形式打包</p>
</blockquote>
<h3 id="1-创建war工程"><a href="#1-创建war工程" class="headerlink" title="1. 创建war工程"></a>1. 创建war工程</h3><blockquote>
<ul>
<li>创建war工程(打包方式选择war)</li>
<li>手动添加 web.xml</li>
<li>添加插件【<code>编译插件，tomcat插件</code>】</li>
<li>添加servlet-api依赖</li>
</ul>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 编译插件 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- tomcat插件 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- 指定端口 --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- 请求路径 --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加servlet-api的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 版本 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 作用域 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-添加SSH依赖"><a href="#2-添加SSH依赖" class="headerlink" title="2. 添加SSH依赖"></a>2. 添加SSH依赖</h3><blockquote>
<ul>
<li>servlet依赖</li>
<li>Hibernate依赖</li>
<li>struts2依赖</li>
<li>Spring依赖</li>
</ul>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 将各种版本信息用变量保存，然后引用 【变量】--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">hibernate.version</span>&gt;</span>5.0.7.Final<span class="tag">&lt;/<span class="name">hibernate.version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.2.4.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">struts.version</span>&gt;</span>2.3.24<span class="tag">&lt;/<span class="name">struts.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- servlet: 提供servlet-api，处理请求【必须指定scope】--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span> <span class="comment">&lt;!--依赖范围--&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- hibernate核心包 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hibernate.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--spring核心及相关包--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   		<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- spring用的aspectj--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- struts2核心及相关包--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.struts<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>struts2-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;struts.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">exclusions</span>&gt;</span> <span class="comment">&lt;!-- ?? --&gt;</span></span><br><span class="line">   			<span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">   				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   			<span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">   		<span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.struts<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>struts2-spring-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;struts.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- mysql连接--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--jstl包 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-配置文件"><a href="#3-配置文件" class="headerlink" title="3. 配置文件"></a>3. 配置文件</h3><blockquote>
<p>参照SSH整合：</p>
<ul>
<li>web.xml：<code>【置于Src下的main/webapp】：配置监听器自动加载applicationContext、拦截器加载struts、拦截器控制数据库session延迟问题</code></li>
<li>struts.xml：<code>【置于Java Resources下的src/main/resource】：工程相关常量</code></li>
<li><del>hibernate.cfg.xml</del></li>
<li><strong>applicationContext.xml</strong>：<code>【置于Java Resources下的src/main/resource】：一言难尽</code></li>
</ul>
</blockquote>
<h3 id="4-包结构"><a href="#4-包结构" class="headerlink" title="4. 包结构"></a>4. 包结构</h3><blockquote>
<ul>
<li>在<code>Java Resources下的src/main/java</code>下配置包结构，存放java源代码</li>
<li>在<code>Java Resources下的src/main/resource</code>下配置包结构，存放配置文件</li>
</ul>
</blockquote>
<h2 id="三-聚合与继承"><a href="#三-聚合与继承" class="headerlink" title="三. 聚合与继承"></a>三. 聚合与继承</h2><p><img src="https://raw.githubusercontent.com/yangsiyuan0/GitPic/master/evernote/%E8%81%9A%E5%90%88%E4%B8%8E%E7%BB%A7%E6%89%BF.png" alt=""><br><code>(注：在现有的多模块maven项目中，一般一个POM既是聚合POM，又是父POM)</code></p>
<h3 id="1-聚合"><a href="#1-聚合" class="headerlink" title="1. 聚合"></a>1. 聚合</h3><p><code>多模块</code></p>
<blockquote>
<p>把多个模块或项目聚合到一起，我们可以建立一个<strong><code>专门负责聚合工作的Maven工程</code></strong></p>
<ul>
<li><code>该聚合模块本身也为一个 Maven 项目，它必须有自己的POM</code></li>
<li><code>其打包方式必须为pom</code></li>
<li><code>版本：聚合模块的版本和被聚合模块版本一致</code></li>
<li><code>相对目录：每个 module 的值都是一个当前 POM 的相对目录</code></li>
<li><code>目录名称：为了方便的快速定位内容，模块所处的目录应当与其 artifactId一致(Maven 约定而不是硬性要求)</code></li>
<li><code>聚合模块减少的内容：聚合模块的内容仅仅是一个 pom.xml 文件，它不包含 src/main/Java、src/test/java 等目录，因为它只是用来帮助其它模块构建的工具，本身并没有实质的内容</code></li>
<li><code>聚合模块和子模块的目录：他们可以是父子类，也可以是平行结构，当然如果使用平行结构，那么聚合模块的 POM 也需要做出相应的更改</code></li>
</ul>
</blockquote>
<h3 id="2-继承"><a href="#2-继承" class="headerlink" title="2. 继承"></a>2. 继承</h3><blockquote>
<p>针对plugin和dependency而言</p>
<ul>
<li><code>一般为父子结构</code></li>
<li><code>作为父模块的 POM，其打包类型也必须为 POM</code></li>
<li><code>父模块只是为了帮助我们消除重复，所以它也不需要 src/main/java、src/test/java 等目录</code></li>
<li><code>子模块省略groupId 和 version：使用了继承的子模块中可以不声明 groupId和 version, 子模块将隐式的继承父模块的这两个元素</code></li>
</ul>
</blockquote>
<h3 id="3-聚合VS继承"><a href="#3-聚合VS继承" class="headerlink" title="3. 聚合VS继承"></a>3. 聚合VS继承</h3><blockquote>
<p>聚合和继承通常是结合使用的，但是其作用是不同的</p>
<ul>
<li><code>聚合是将多个模块的工程汇聚到一起</code></li>
<li><code>继承则是指明某个模块工程要继承另一个模块功能</code></li>
</ul>
</blockquote>
<h2 id="四-构建多模块Maven工程"><a href="#四-构建多模块Maven工程" class="headerlink" title="四. 构建多模块Maven工程"></a>四. 构建多模块Maven工程</h2><h3 id="1-构建父工程-Maven-Project"><a href="#1-构建父工程-Maven-Project" class="headerlink" title="1. 构建父工程(Maven Project)"></a>1. 构建父工程(Maven Project)</h3><blockquote>
<p>父工程的打包方式必须为pom</p>
</blockquote>
<h3 id="2-创建子模块-Maven-Module"><a href="#2-创建子模块-Maven-Module" class="headerlink" title="2. 创建子模块(Maven Module)"></a>2. 创建子模块(Maven Module)</h3><p><code>配置文件同时也要分离存放在各模块</code></p>
<blockquote>
<ul>
<li>domain子模块 【<code>打包方式为jar</code>】<ul>
<li><code>存放实体bean类的映射配置文件：*.hbm.xml</code> 【必须构造<strong>和java代码中一样的包结构</strong>用于存放】</li>
</ul>
</li>
<li>dao子模块 【<code>打包方式为jar</code>】<ul>
<li><code>存放数据源配置文件：applicationContext_datasource.xml</code></li>
<li><code>存放dao实现类的配置文件：applicationContext_dao.xml</code></li>
</ul>
</li>
<li>service子模块【<code>打包方式为jar</code>】<ul>
<li><code>存放数据库事务的配置文件：applicationContext_tx.xml</code></li>
<li><code>存放service实现类的配置文件：applicationContext_service.xml</code></li>
</ul>
</li>
<li>web.action子模块 【<strong><code>打包方式为war</code></strong>】<ul>
<li><code>存放页面jsp文件</code></li>
<li><code>存放实体类与数据表关系的配置文件：struts.xml</code></li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="3-单元测试"><a href="#3-单元测试" class="headerlink" title="3. 单元测试"></a>3. 单元测试</h3><blockquote>
<ol>
<li>在dao层中添加junit依赖</li>
<li>在dao层<code>src/test/java</code>下创建测试类</li>
<li>右键点击你要测试的<strong>方法</strong>，选择右键菜单 Run as –&gt; JUnit test</li>
</ol>
</blockquote>
<h2 id="五-依赖管理"><a href="#五-依赖管理" class="headerlink" title="五. 依赖管理"></a>五. 依赖管理</h2><h3 id="1-依赖范围"><a href="#1-依赖范围" class="headerlink" title="1. 依赖范围"></a>1. 依赖范围</h3><blockquote>
<p>一些特殊应用场景：</p>
<ul>
<li>servlet-api<strong>必须</strong>设置为provided<br><code>如果在运行状态存在(即在war包中存在)，会与tomcat中自带的servlet冲突</code></li>
<li>mysql 驱动建议设置为runtime<br><code>编译过程并不需要利用到连接驱动</code></li>
<li>test设置为test<br><code>只在测试中用到</code></li>
</ul>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- servlet-api依赖的设置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span> <span class="comment">&lt;!--依赖范围为provided--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-依赖传递"><a href="#2-依赖传递" class="headerlink" title="2. 依赖传递"></a>2. 依赖传递</h3><blockquote>
<p>依赖传递过程中，其最终依赖范围(Scope)为交集运算后的结果<br><img src="https://raw.githubusercontent.com/yangsiyuan0/GitPic/master/evernote/%E4%BE%9D%E8%B5%96%E4%BC%A0%E9%80%92.png" alt=""></p>
</blockquote>
<h3 id="3-依赖调节原则"><a href="#3-依赖调节原则" class="headerlink" title="3. 依赖调节原则"></a>3. <del>依赖调节原则</del></h3><blockquote>
<p>多条路径指向同一个依赖结果时，遵循如下原则</p>
<ul>
<li>依赖调解第一原则：路径优先</li>
<li>依赖调解第二原则：声明优先</li>
</ul>
</blockquote>
<h3 id="4-版本锁定-★"><a href="#4-版本锁定-★" class="headerlink" title="4. 版本锁定(★)"></a>4. 版本锁定(★)</h3><blockquote>
<p>在Maven中利用<code>&lt;dependencyManagement&gt;</code>标签进行所依赖jar包进的版本管理</p>
<ul>
<li><code>版本控制器一般声明在父类(便于子类的依赖版本的统一管理)</code></li>
<li><code>如果依赖中没有声明版本，才会采信版本控制器中的版本信息，否则遵循本身的设置</code></li>
</ul>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 锁定版本，struts2-2.3.24、spring4.2.4、hibernate5.0.7 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="5-排除依赖"><a href="#5-排除依赖" class="headerlink" title="5. 排除依赖"></a>5. 排除依赖</h3><blockquote>
<p>在使用框架中，又可能多个框架引入了相同的依赖Jar包，导致版本冲突，需要<strong>排除低版本的 jar 包</strong></p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.struts<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>struts2-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--排除struts中依赖的javassist【比hibernate中的版本低】--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="六-私服nexus搭建"><a href="#六-私服nexus搭建" class="headerlink" title="六. 私服nexus搭建"></a>六. 私服nexus搭建</h2><blockquote>
<p>nexus中的仓库按类型分类：<br>（<code>平常开发中都去连接仓库组Group，仓库组中包括：hosted、proxy</code>）</p>
<ul>
<li><code>hosted:宿主仓库，自己项目的 jar 要放到 hosted 类型的仓库中</code><ul>
<li><code>3rd party一般指版权不明的第三方jar，但可以正常使用</code></li>
<li><code>release为发行版</code></li>
<li><code>snapshot为快照版</code></li>
</ul>
</li>
<li><code>proxy：代理仓库，代理中央仓库</code></li>
<li><code>virtual：虚拟仓库，存储了 maven1 的构件，一般不用</code></li>
<li><code>group:仓库组，将一些仓库组成一个组，自己项目连接仓库组去下载 jar 包</code></li>
</ul>
</blockquote>
<h3 id="1-nexus-安装"><a href="#1-nexus-安装" class="headerlink" title="1. nexus 安装"></a>1. nexus 安装</h3><blockquote>
<ul>
<li>解压安装包</li>
<li>并在<code>nexus-2.12.0-01-bundle\nexus-2.12.0-01\bin</code>目录下使用cmd命令<code>nexus install</code>【cmd环境】</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>启动nexus服务 【windows的本地服务】</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>进入nexus：<a href="http://localhost:8081/nexus" target="_blank" rel="noopener">http://localhost:8081/nexus</a> 【账户:admin;密码:admin123】</li>
</ul>
</blockquote>
<h3 id="2-构建索引"><a href="#2-构建索引" class="headerlink" title="2. 构建索引"></a>2. 构建索引</h3><blockquote>
<p>刚刚安装好的 nexus 是无法直接搜索到 jar 包的，必须下载索引才可以正常使用</p>
<ul>
<li>到中央仓库地址 <a href="http://repo.maven.apache.org/maven2/.index/" target="_blank" rel="noopener">http://repo.maven.apache.org/maven2/.index/</a> 下载以下两个索引压缩文件及一个jar包<ul>
<li><code>nexus-maven-repository-index.gz</code></li>
<li><code>nexus-maven-repository-index.properties</code>(均在文档结尾)</li>
<li><code>indexer-cli-5.1.1.jar</code>(直接google)</li>
</ul>
</li>
<li>将上述三个文件放在一个文件夹下，并在该目录下运行cmd：<code>java -jar indexer-cli-5.1.1.jar -u nexus-maven-repository-index.gz -d indexer</code><br><code>【该过程用于构建索引(自动生成在indexer目录下)】</code></li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>将<code>nexus-2.12.0-01-bundle\sonatype-work\nexus\indexer\central-ctx</code>目录下的文件删除，将上边的索引文件拷贝到此目录下</li>
</ul>
</blockquote>
<h3 id="3-镜像配置"><a href="#3-镜像配置" class="headerlink" title="3. 镜像配置"></a>3. 镜像配置</h3><blockquote>
<p>在maven安装目录下的<code>conf/settings.xml</code>中进行配置</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="4-发布自定义工程jar"><a href="#4-发布自定义工程jar" class="headerlink" title="4. 发布自定义工程jar"></a>4. 发布自定义工程jar</h3><blockquote>
<p>在pom.xml中配置</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--releases版本的配置--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url</span>&gt;</span></span><br><span class="line">			http://localhost:8081/nexus/content/repositories/releases/</span><br><span class="line">		<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--snapshots版本的配置 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url</span>&gt;</span></span><br><span class="line">			http://localhost:8081/nexus/content/repositories/snapshots/</span><br><span class="line">		<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>在maven的setting.xml中配置</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--releases版本的配置--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--snapshots版本的配置 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>关于SpringBoot中的日志配置</title>
    <url>/2019/10/24/%E5%85%B3%E4%BA%8ESpringBoot%E4%B8%AD%E7%9A%84%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="一-常用日志框架"><a href="#一-常用日志框架" class="headerlink" title="一. 常用日志框架"></a>一. 常用日志框架</h2><p>日志作为线上问题追踪、业务逻辑统计分析的必要组成成分，在BS应用中必不可少。目前常用的Java日志框架主要包含Log4j，Log4j 2，Commons Logging，Slf4j，Logback，Jul：</p>
<blockquote>
<ul>
<li><strong>log4j：</strong> <code>Apache Log4j是一个基于Java的日志记录工具。它是由Ceki Gülcü首创的，现在则是Apache软件基金会的一个项目。 Log4j是几种Java日志框架之一</code></li>
</ul>
</blockquote>
<blockquote>
<ul>
<li><strong>log4j2：</strong> <code>Apache Log4j 2是apache开发的一款Log4j的升级产品</code></li>
</ul>
</blockquote>
<blockquote>
<ul>
<li><strong>commons-logging：</strong> <code>Apache基金会所属的项目，是一套Java日志接口，之前叫Jakarta Commons Logging，后更名为Commons Logging</code></li>
</ul>
</blockquote>
<blockquote>
<ul>
<li><strong>slf4j：</strong> <code>(Simple Logging Facade for Java) 它是一个针对于各类Java日志框架的统一Facade抽象, 不是具体的日志解决方案，它只服务于各种各样的日志系统</code><br>【slf4j配合log4j、logback进行使用，可以理解为slf4j是标准，log4j和logback是实现】</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li><strong>logback：</strong> <code>一套日志组件的实现(slf4j阵营)，新一代日志框架，它效率更高、能够适应诸多的运行环境，同时天然支持SLF4J</code></li>
</ul>
</blockquote>
<blockquote>
<ul>
<li><strong>jul ：</strong><code>(Java Util Logging),自Java1.4以来的官方日志实现</code></li>
</ul>
</blockquote>
<h2 id="二-springBoot中的日志"><a href="#二-springBoot中的日志" class="headerlink" title="二. springBoot中的日志"></a>二. springBoot中的日志</h2><p>   Spring Boot在所有内部日志中使用Commons Logging，但是默认配置也提供了对常用日志的支持，如：Java Util Logging，Log4J, Log4J2和Logback。每种Logger都可以通过配置使用控制台或者文件输出日志内容。</p>
<p><code>默认情况下，Spring Boot会用Logback来记录日志，并用INFO级别输出到控制台。</code><br><strong>下述内容，将以logback为例，简述springboot中日志的配置。</strong></p>
<h3 id="1-添加日志依赖"><a href="#1-添加日志依赖" class="headerlink" title="1. 添加日志依赖"></a>1. 添加日志依赖</h3><p>logback其依赖的jar包含：<code>slf4j-api-1.6.0.jar、logback-core-0.9.21.jar、logback-classic-0.9.21.jar、logback-access-0.9.21.jar</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 实际开发中我们不需要直接添加该依赖, spring-boot-starter中已包含 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-属性文件配置"><a href="#2-属性文件配置" class="headerlink" title="2. 属性文件配置"></a>2. 属性文件配置</h3><p>spring-boot-starter-logging已提供了开箱即用的起步配置，除此之外，我们还可以进行一些自定义配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#logging.file与logging.path不可同时使用，否则仅前者会失效</span></span><br><span class="line"><span class="comment"># 日志文件名称，默认为spring.log</span></span><br><span class="line"><span class="string">logging.file=dyportalserver</span></span><br><span class="line"><span class="comment"># 日志文件目录</span></span><br><span class="line"><span class="string">logging.path=C://log//dyportalserver</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#对指定包、类进行打印级别设置</span></span><br><span class="line"><span class="string">logging.level.com.dayang=DEBUG</span></span><br><span class="line"><span class="string">logging.level.root=WARN</span></span><br><span class="line"><span class="comment">#引入不满足日志配置文件命名规范的文件</span></span><br><span class="line"><span class="string">logging.config=classpath:logging-config.xml</span></span><br></pre></td></tr></table></figure>
<h3 id="3-自定义日志配置"><a href="#3-自定义日志配置" class="headerlink" title="3. 自定义日志配置"></a>3. 自定义日志配置</h3><p>根据不同的日志框架，需要按照指定的命名规则，才能正确的被spring加载：</p>
<blockquote>
<ul>
<li><strong>Logback：</strong><br><code>logback-spring.xml / logback-spring.groovy / logback.xml / logback.groovy</code></li>
</ul>
</blockquote>
<blockquote>
<ul>
<li><strong>Log4j：</strong><br><code>log4j-spring.properties / log4j-spring.xml / log4j.properties / log4j.xml</code></li>
</ul>
</blockquote>
<blockquote>
<ul>
<li><strong>Log4j2：</strong><br><code>log4j2-spring.xml / log4j2.xml</code></li>
</ul>
</blockquote>
<blockquote>
<ul>
<li><strong>JDK (Java Util Logging)：</strong><br><code>logging.properties</code></li>
</ul>
</blockquote>
<h2 id="三-关于logback文件的配置"><a href="#三-关于logback文件的配置" class="headerlink" title="三. 关于logback文件的配置"></a>三. 关于logback文件的配置</h2><p>Spring Boot官方推荐优先使用带有-spring的文件名作为你的日志配置（如<strong>使用logback-spring.xml，而不是logback.xml</strong>），命名为logback-spring.xml的日志配置文件，spring boot可以为它添加一些spring boot特有的配置项</p>
<h3 id="1-主要的节点"><a href="#1-主要的节点" class="headerlink" title="1. 主要的节点"></a>1. 主要的节点</h3><ul>
<li><strong>configuration</strong>：根节点，包含scan、scanPeriod、debug三个属性</li>
<li><strong>scan</strong>:  当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true</li>
<li><strong>scanPeriod</strong>:  设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟</li>
<li><strong>debug</strong>:  当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false</li>
<li><strong>property</strong>：configuration的子节点，用于定义变量值，包含name、value两个属性</li>
<li><strong>logger</strong>：configuration的子节点，用来设置某一个包或者具体的某一个类的日志打印级别</li>
<li><strong>name</strong>：(必选) 受此logger约束的某一个包或者具体的某一个类的全路径</li>
<li><strong>level</strong>：打印级别，大小写无关</li>
<li><strong>addtivity</strong>：是否向上级logger传递打印信息。默认是true<br>（<logger>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个logger）</li>
<li><strong>root</strong>：configuration的子节点，也是<logger>元素，但是它是根logger，只有level属性</li>
<li><strong>appender</strong>：configuration的子节点，用于定义一个日志输出格式(打印地方、输出样式)</li>
<li><strong>name</strong>：该appender的唯一标识</li>
<li><strong>class</strong>：该appender类实例的完整类名称(即appender的类型)</li>
<li><strong>ConsoleAppender</strong>：输出到控制台</li>
<li><strong>RollingFileAppender</strong>【常用】：滚动记录文件(记录到文件，打到指定条件(时间，大小)，转移到另一个文件)</li>
<li><strong>FileAppender</strong>：输出到文件</li>
<li><strong>SocketAppender/SSLSocketAppender</strong>:输出日志到远程实例(明码/加密)</li>
<li><strong>ServerSocketAppender/SSLSeverSocketAppender</strong>:被动连接远程日志服务器(它监听来自客户端的连接请求)</li>
<li><strong>SMTPAppender</strong>: 邮件发送</li>
<li><strong>DBAppender</strong>：可以将日志事件插入到3张数据表中：logging_event，logging_event_property，logging_event_exception</li>
</ul>
<h3 id="2-一个控制台输出appender示例"><a href="#2-一个控制台输出appender示例" class="headerlink" title="2. 一个控制台输出appender示例"></a>2. 一个控制台输出appender示例</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"console"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="3-一个错误日志文件appender示例"><a href="#3-一个错误日志文件appender示例" class="headerlink" title="3. 一个错误日志文件appender示例"></a>3. 一个错误日志文件appender示例</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"error_file"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.ThresholdFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 日志文件名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">File</span>&gt;</span>$&#123;LOG_PATH&#125;/error.log<span class="tag">&lt;/<span class="name">File</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 滚动策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_PATH&#125;/error-%d&#123;yyyyMMdd&#125;.log.%i</span><br><span class="line">            <span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>500MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>2<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 编码格式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; -%msg%n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> <span class="comment">&lt;!-- 此处设置字符集 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="4-logger配置示例"><a href="#4-logger配置示例" class="headerlink" title="4. logger配置示例"></a>4. logger配置示例</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子节点2：root【用来指定最基础的日志输出级别(必选)】只有一个level属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"info_file"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"error_file"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"error"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"error_file"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span>     </span><br><span class="line">    <span class="comment">&lt;!-- 子节点3：logger 【用来设置某一个包或者具体的某一个类的日志打印级别、以及指定&lt;appender&gt;】</span></span><br><span class="line"><span class="comment">              - name(必选)：受此logger约束的某一个包或者具体的某一个类</span></span><br><span class="line"><span class="comment">              - level：打印级别，大小写无关</span></span><br><span class="line"><span class="comment">              - addtivity：是否向上级logger传递打印信息。默认是true</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.dayang"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"console"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="5-一个TimeBasedRollingPolicy滚动策略详解"><a href="#5-一个TimeBasedRollingPolicy滚动策略详解" class="headerlink" title="5. 一个TimeBasedRollingPolicy滚动策略详解"></a>5. 一个TimeBasedRollingPolicy滚动策略详解</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">!—基于时间的滚动策略</span> <span class="attr">--</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">!—yyyyMMdd表示滚动频率为一天</span> <span class="attr">--</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_PATH&#125;/info-%d&#123;yyyyMMdd&#125;.log.%i<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">!—单个文件最大大小为500M--</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>500MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">!—最长保留30天-</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="四-项目实践"><a href="#四-项目实践" class="headerlink" title="四. 项目实践"></a>四. 项目实践</h2><h3 id="1-application配置"><a href="#1-application配置" class="headerlink" title="1. application配置"></a>1. application配置</h3><ul>
<li><p>application.properties配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">######################## 日志相关配置   ##############################</span></span><br><span class="line"><span class="comment"># 日志文件目录</span></span><br><span class="line"><span class="string">logging.path=C://log//dyportalserver</span></span><br><span class="line"><span class="string">logging.level.com.dayang=info</span></span><br><span class="line"><span class="comment"># 日志文件名称，默认为spring.log</span></span><br><span class="line"><span class="string">logging.config=classpath:logback-spring.xml</span></span><br></pre></td></tr></table></figure></li>
<li><p>application-dev.properties配置<br><code>实现生产环境info级别，开发环境debug级别</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">######################## 日志相关配置   ##############################</span></span><br><span class="line"><span class="comment"># 日志级别修改</span></span><br><span class="line"><span class="string">logging.level.com.dayang=info</span></span><br></pre></td></tr></table></figure>
<h3 id="2-Logback配置"><a href="#2-Logback配置" class="headerlink" title="2. Logback配置"></a>2. Logback配置</h3></li>
<li><p>单个日志文件大小：10M</p>
</li>
<li><p>日志文件最大留存天数：2天</p>
</li>
<li><p>本地留存日志最大大小1G  【2、3两要求取交集】</p>
</li>
<li><p>日志打印级别读取动态配置。默认为debug</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 根节点configuration:</span></span><br><span class="line"><span class="comment">     - scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true</span></span><br><span class="line"><span class="comment">     - scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟</span></span><br><span class="line"><span class="comment">     - de<span class="doctag">bug:</span>当此属性设置为true时，将打印出&lt;u&gt;logback&lt;/u&gt;内部日志信息，实时查看&lt;u&gt;logback&lt;/u&gt;运行状态。默认值为false</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>  <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"60 seconds"</span> <span class="attr">debug</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 上下文名称contextName,默认为default --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">contextName</span>&gt;</span><span class="tag">&lt;<span class="name">u</span>&gt;</span>logback<span class="tag">&lt;/<span class="name">u</span>&gt;</span><span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义变量值property(变量会被插入logger上下文，可以通过$&#123;&#125;形式获取)-name:变量名称 value:变量值  --&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 读取application.properties文件中的logging.path配置值 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"LOG_PATH"</span> <span class="attr">source</span>=<span class="string">"logging.path"</span> <span class="attr">defaultValue</span>=<span class="string">"C://log/dyportalserver"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"LOG_lEVEL"</span> <span class="attr">source</span>=<span class="string">"logging.level.com.dayang"</span> <span class="attr">defaultValue</span>=<span class="string">"DEBUG"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--子节点1：appender【格式化日志输出节点】</span></span><br><span class="line"><span class="comment">      - name:名称</span></span><br><span class="line"><span class="comment">      - class:输出策略，有如下几种</span></span><br><span class="line"><span class="comment">      - ConsoleAppender：输出到控制台</span></span><br><span class="line"><span class="comment">      - RollingFileAppender【常用】：滚动记录文件(记录到文件，打到指定条件(时间，大小)，转移到另一个文件)</span></span><br><span class="line"><span class="comment">      - FileAppender：输出到文件</span></span><br><span class="line"><span class="comment">      - SocketAppender/SSLSocketAppender:输出日志到远程实例(明码/加密)</span></span><br><span class="line"><span class="comment">      - ServerSocketAppender/SSLSeverSocketAppender:被动连接远程日志服务器(它监听来自客户端的连接请求)</span></span><br><span class="line"><span class="comment">      - SMTPAppender:邮件发送</span></span><br><span class="line"><span class="comment">      - DBAppender：可以将日志事件插入到3张数据表中：logging_event，logging_event_property，logging_event_exception     </span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"console"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%&lt;u&gt;msg&lt;/u&gt;：日志消息，%n是换行符 %L行号--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyyMM-dd HH:mm:ss&#125;|%-5level|[%thread] %logger&#123;36&#125;[%L] -%msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"info_file"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 日志名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">File</span>&gt;</span>$&#123;LOG_PATH&#125;/info.log<span class="tag">&lt;/<span class="name">File</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志级别 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.ThresholdFilter"</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">level</span>&gt;</span>$&#123;LOG_LEVEL&#125;<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 滚动策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_PATH&#125;/info-%d&#123;yyyyMMdd&#125;.log.%i<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 单个文件最大值 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>10MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 归档文件最大值 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>1GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 最大保留日期，单位为滚动单位 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>2<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- appender启动时删除归档，默认为false，即轮转时异步删除 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">cleanHistoryOnStart</span>&gt;</span>true<span class="tag">&lt;/<span class="name">cleanHistoryOnStart</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--TriggeringPolicy 的实现用于通知RollingFileAppender 何时轮转--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"&gt;</span></span><br><span class="line"><span class="comment">                &lt;maxFileSize&gt;10MB&lt;/maxFileSize&gt;</span></span><br><span class="line"><span class="comment">            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyyMM-dd HH:mm:ss&#125;|%-5level|[%thread] %logger&#123;36&#125;[%L] -%msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> <span class="comment">&lt;!-- 此处设置字符集 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"error_file"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.ThresholdFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">File</span>&gt;</span>$&#123;LOG_PATH&#125;/error.log<span class="tag">&lt;/<span class="name">File</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_PATH&#125;/error-%d&#123;yyyyMMdd&#125;.log.%i<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 单个文件最大值 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>10MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 归档文件最大值 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>1GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 最大保留日期，单位为滚动单位 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>2<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- appender启动时删除归档，默认为false，即轮转时异步删除 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">cleanHistoryOnStart</span>&gt;</span>true<span class="tag">&lt;/<span class="name">cleanHistoryOnStart</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--TriggeringPolicy 的实现用于通知RollingFileAppender 何时轮转--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyyMM-dd HH:mm:ss&#125;|%-5level|[%thread] %logger&#123;36&#125;[%L] -%msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> <span class="comment">&lt;!-- 此处设置字符集 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 子节点2：root【用来指定最基础的日志输出级别(必选)】只有一个level属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"info_file"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"error_file"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"error"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"error_file"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span>     </span><br><span class="line">    <span class="comment">&lt;!-- 子节点3：logger 【用来设置某一个包或者具体的某一个类的日志打印级别、以及指定&lt;appender&gt;】</span></span><br><span class="line"><span class="comment">      - name(必选)：受此logger约束的某一个包或者具体的某一个类</span></span><br><span class="line"><span class="comment">      - level：打印级别，大小写无关</span></span><br><span class="line"><span class="comment">      - addtivity：是否向上级logger传递打印信息。默认是true</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.dayang"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"console"</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="五-集成actuator实现动态修改日志级别"><a href="#五-集成actuator实现动态修改日志级别" class="headerlink" title="五. 集成actuator实现动态修改日志级别"></a>五. 集成actuator实现动态修改日志级别</h2><p>Spring Boot 1.5.x中引入的一个新的控制端点：/loggers，该端点将为我们提供动态修改Spring Boot应用日志级别的强大功能。该功能的使用非常简单，它依然延续了Spring Boot自动化配置的实现，所以只需要在引入了spring-boot-starter-actuator依赖的条件下就会自动开启该端点的功能<br><strong>详情可参见如下文档</strong><br><a href="http://blog.didispace.com/spring-boot-actuator-1/" target="_blank" rel="noopener">Spring Boot Actuator监控端点小结</a></p>
<h3 id="1-pom配置"><a href="#1-pom配置" class="headerlink" title="1. pom配置"></a>1. pom配置</h3><p>引入actuator依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>            </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>               </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>      </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>     </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>              </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>                </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-自定义接口来监控日志级别的变化"><a href="#2-自定义接口来监控日志级别的变化" class="headerlink" title="2. 自定义接口来监控日志级别的变化"></a>2. 自定义接口来监控日志级别的变化</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(getClass());      </span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/test"</span>, method = RequestMethod.GET)        </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testLogLevel</span><span class="params">()</span> </span>&#123;             </span><br><span class="line">        logger.debug(<span class="string">"Logger Level ：DEBUG"</span>);             </span><br><span class="line">        logger.info(<span class="string">"Logger Level ：INFO"</span>);               </span><br><span class="line">        logger.error(<span class="string">"Logger Level ：ERROR"</span>);             </span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;       </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);      </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-查询日志级别-GET"><a href="#3-查询日志级别-GET" class="headerlink" title="3. 查询日志级别[GET]"></a>3. 查询日志级别[GET]</h3><blockquote>
<p><strong>URL示例：</strong><br><code>[GET] http://10.10.0.120:9010/gateway/dyportalserver/monitor/loggers/com.dayang</code></p>
</blockquote>
<blockquote>
<p><strong>URL解释：</strong></p>
<ul>
<li>服务地址：<a href="http://10.10.0.120:9010/gateway/dyportalserver/" target="_blank" rel="noopener">http://10.10.0.120:9010/gateway/dyportalserver/</a></li>
<li>actuator上下文：monitor</li>
<li>扫描包路径：com.dayang</li>
</ul>
</blockquote>
<h3 id="4-修改日志级别-POST"><a href="#4-修改日志级别-POST" class="headerlink" title="4. 修改日志级别[POST]"></a>4. 修改日志级别[POST]</h3><blockquote>
<p><strong>URL示例：</strong><br><code>[POST] http://10.10.0.120:9010/gateway/dyportalserver/monitor/loggers/com.dayang</code></p>
</blockquote>
<blockquote>
<p><strong>URL解释：</strong></p>
<ul>
<li>服务地址：<a href="http://10.10.0.120:9010/gateway/dyportalserver/" target="_blank" rel="noopener">http://10.10.0.120:9010/gateway/dyportalserver/</a></li>
<li>actuator上下文：monitor</li>
<li>扫描包路径：com.dayang</li>
</ul>
</blockquote>
<h2 id="六-FAQ"><a href="#六-FAQ" class="headerlink" title="六. FAQ"></a>六. FAQ</h2><h3 id="1-为什么springBoot官方推荐优先使用带有-spring的文件名作为你的日志配置？"><a href="#1-为什么springBoot官方推荐优先使用带有-spring的文件名作为你的日志配置？" class="headerlink" title="1. 为什么springBoot官方推荐优先使用带有-spring的文件名作为你的日志配置？"></a>1. 为什么springBoot官方推荐优先使用带有-spring的文件名作为你的日志配置？</h3><p><img src="https://raw.githubusercontent.com/yangsiyuan0/GitPic/master/evernote/logback1.png" alt=""></p>
<h3 id="2-为什么选择logback日志框架？"><a href="#2-为什么选择logback日志框架？" class="headerlink" title="2. 为什么选择logback日志框架？"></a>2. 为什么选择logback日志框架？</h3><p>logback是log4j作者推出的新日志系统，原生支持slf4j通用日志api，允许平滑切换日志系统，并且对简化应用部署中日志处理的工作做了有益的封装</p>
<h3 id="3-logback-xml中，root和logger两个节点之间的关系？"><a href="#3-logback-xml中，root和logger两个节点之间的关系？" class="headerlink" title="3. logback.xml中，root和logger两个节点之间的关系？"></a>3. logback.xml中，root和logger两个节点之间的关系？</h3><p>root与logger为父子关系，Logger的appender根据参数additivity决定是否要叠加root的appender，logger的级别是其自身定义的级别，和root的级别没什么关系</p>
<h3 id="4-application文件中的logging-path属性与logging-file属性"><a href="#4-application文件中的logging-path属性与logging-file属性" class="headerlink" title="4. application文件中的logging.path属性与logging.file属性"></a>4. application文件中的logging.path属性与logging.file属性</h3><p>Spring Boot中的logging.path和logging.file这2个属性，只需要配置其中之一即可，如果同时配置，则使用logging.file属性；当配置了loggin.path属性时，将在该路径下生成spring.log文件；当配置了loggin.file属性时，将在指定路径下生成指定名称的日志文件</p>
<h3 id="5-logback-xml中标签的使用"><a href="#5-logback-xml中标签的使用" class="headerlink" title="5. logback.xml中标签的使用"></a>5. logback.xml中<springProperty>标签的使用</h3><p><img src="https://raw.githubusercontent.com/yangsiyuan0/GitPic/master/evernote/logback2.png" alt=""></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>日志</tag>
        <tag>logback</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Data</title>
    <url>/2019/10/24/Spring%20Data%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<blockquote>
<p><strong>To Do</strong></p>
<ul>
<li><input checked="" disabled="" type="checkbox"> <a href="https://stackoverflow.com/questions/11881548/jpa-or-jdbc-how-are-they-different" target="_blank" rel="noopener">JDBC与JPA的区别</a><ul>
<li><code>JDBC是数据库访问的标准;JPA是ORM的标准</code></li>
<li><code>JPA和JDBC之间的主要区别是抽象层次:JDBC是与数据库交互的低级标准,JPA是同一目的的较高标准</code></li>
<li><code>JDBC是JPA的前身</code></li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> <a href="http://www.jianshu.com/p/49b31ef74ff3" target="_blank" rel="noopener">Hibernate与Mybatis与Spring Data</a><ul>
<li><code>Hibernate是一个开放源代码的对象关系映射框架，它对JDBC进行了非常轻量级的对象封装</code>【开发难度大】</li>
<li><code>MyBatis 本是apache的一个开源项目iBatis，着力于POJO与SQL之间的映射关系</code></li>
<li><code>Spring Data是一个用于简化数据库访问，并支持云服务的开源框架。其主要目标是使得对数据的访问变得方便快捷，并支持map-reduce框架和云计算数据服务</code>【SQL的自由度低】</li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> Predicate接口中的CriteriaQuery与CriteriaBuilder<ul>
<li><del><code>CriteriaQuery:表达式查询语句</code></del></li>
<li><code>CriteriaBuilder：面向对象查询语句(.equal(),.and(),.or(),.like())</code></li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> <a href="http://www.hollischuang.com/archives/1658" target="_blank" rel="noopener"><strong>JDBC事务和JTA事务</strong></a><ul>
<li><code>JDBC的一切行为包括事务是基于一个Connection的(在JDBC中是通过Connection对象进行事务管理(常用的和事务相关的方法是： setAutoCommit、commit、rollback等)</code></li>
<li><code>Java Transaction API是一个Java企业版 的应用程序接口，在Java环境中，允许完成跨越多个XA资源的分布式事务</code>【处理分布式事务】</li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> <strong>关于关联对象的懒加载处理</strong></li>
</ul>
</blockquote>
<hr>
<blockquote>
<p><strong>Question：</strong></p>
<ul>
<li>test中的数据库操作，会报tansactionrequired异常，事务会自动回滚roll back<ul>
<li><code>在test方法上手动设置@Transactional可以声明事务</code></li>
<li><code>在test方法上手动设置@Rollback(false)，可以禁止回滚</code></li>
</ul>
</li>
<li>进行save(Object)操作时，如果对象中有主键信息，会自动切换为修改操作<code>(因此：增、改均可以使用同一个方法save)</code><br><code>【小tips:可以在页面设置隐藏td用于存放id，可以根据实际情况进行自动判断，进行增加或者修改】</code></li>
</ul>
</blockquote>
<hr>
<h2 id="一-概述"><a href="#一-概述" class="headerlink" title="一. 概述"></a>一. 概述</h2><blockquote>
<p>为了简化并统一持久层的各种实现技术的API，Spring Data提供了一套标准的API，整合不同持久层</p>
<ul>
<li><code>spring-data-commons：一套标准API</code></li>
<li><code>spring-data-jpa 基于整合JPA实现</code></li>
</ul>
</blockquote>
<hr>
<h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.  简介"></a>1.  简介</h3><blockquote>
<p>SpringData支持的持久层技术：</p>
<ul>
<li>NoSQL 存储：<code>MongoDB （文档数据库）</code>、<code>Neo4j（图形数据库）</code>、<code>Redis（键/值存储）</code>、<code>Hbase（列族数据库）</code></li>
<li>关系数据存储技术：<code>JDBC</code>、<code>JPA</code><ul>
<li><code>JDBC：(Java Data Base Connectivity)，用于直接调用SQL命令,面向数据库</code></li>
<li><code>JPA：(Java Persistence API),操作实体对象,免除编写繁琐的SQL,面向对象</code><br>【<code>HIbernate即JPA的一种实现</code>】<br><img src="https://raw.githubusercontent.com/yangsiyuan0/GitPic/master/evernote/Hibenate.png" alt=""></li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="2-操作步骤"><a href="#2-操作步骤" class="headerlink" title="2. 操作步骤"></a>2. 操作步骤</h3><blockquote>
<ol>
<li>配置 Spring 整合 JPA</li>
<li>在 Spring 配置文件中配置 Spring Data，让 Spring 为声明的接口创建代理对象。</li>
<li>声明持久层的接口，该接口继承自Repository接口(<code>开发中一般继承其子接口</code>)，并注入实体类及其主键类型<br>【<strong><code>spring容器实际通过AOP为我们提供的是SimpleJpaRepository（JpaRepository的实现类）的对象</code></strong>】</li>
<li>在接口中声明需要的Method</li>
<li>使用Spring为这些接口创建代理实例(<code>也可以通过JavaConfig,或者XML配置</code>)<br><code>&lt;jpa:repositories base-package=&quot;com.acme.repositories&quot;/&gt; (XML配置语句)</code></li>
<li>获取Repository实例注入并使用它</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.声明一个继承自Repository的接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PersonRepository</span> <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt; </span>&#123; </span><br><span class="line">	<span class="comment">// 声明要查询的方法</span></span><br><span class="line">	<span class="function">List&lt;Person&gt; <span class="title">findByLastname</span><span class="params">(String lastname)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.通过config为自定义接口创建代理对象</span></span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.config.EnableJpaRepositories;</span><br><span class="line"><span class="meta">@EnableJpaRepositories</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 注入Repository实例，并使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeClient</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> PersonRepository repository;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		List&lt;Person&gt; persons = repository.findByLastname(<span class="string">"Matthews"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-Repository接口"><a href="#3-Repository接口" class="headerlink" title="3. Repository接口"></a>3. Repository接口</h3><p><code>Spring-data-commons中提供</code></p>
<blockquote>
<p>Repository接口是 Spring Data 的一个核心接口,但是并不提供任何method，为一个名义接口</p>
<ul>
<li><code>开发者在自定义子接口中定义method</code></li>
<li><code>Spring Data让我们可以只定义接口，只要遵循 Spring Data的规范，就</code><strong><code>无需写实现类</code></strong></li>
</ul>
</blockquote>
<h3 id="4-Repository子接口"><a href="#4-Repository子接口" class="headerlink" title="4. Repository子接口"></a>4. Repository子接口</h3><p><code>标准接口位于Spring-data-commons</code><br><code>扩展接口位于Spring-data-jpa</code></p>
<blockquote>
<ul>
<li>CrudRepository 标准接口 (<code>提供了最基本的对实体类的CRUD操作</code>)<ul>
<li><code>增删改：save、delete、deleteAll</code></li>
<li><code>查：findAll、findOne、count</code></li>
</ul>
</li>
<li>PagingAndSortingRepository 标准接口(<code>继承自CrudRepository，提供了分页与排序功能</code>)<ul>
<li><strong><code>排序</code></strong>：<code>Iterable&lt;T&gt; findAll(Sort sort);</code></li>
<li><strong><code>分页查询（含排序功能）</code></strong>：<code>Page&lt;T&gt; findAll(Pageable pageable);</code></li>
</ul>
</li>
<li>JpaRepository 扩展接口(<code>该接口提供了JPA的相关功能</code>)</li>
</ul>
</blockquote>
<p>|method|Description|<br>|:-|:-|:-|<br>|<code>List&lt;T&gt; findAll()</code> |查找所有实体|<br>|<code>List&lt;T&gt; findAll(Sort sort)</code> |排序、查找所有实体|<br>|<code>List&lt;T&gt; save(Iterable&lt;? extends T&gt; entities)</code>|保存集合|</p>
<blockquote>
<ul>
<li>JpaSpecificationExecutor 扩展接口(<code>不属于Repository体系，实现一组JPA Criteria查询相关的方法</code>)</li>
<li>Specification：Spring Data JPA提供的查询规范，用于复杂的查询(<code>类似于QBC查询</code>)</li>
<li>自定义Repository子接口</li>
</ul>
</blockquote>
<h2 id="二-操作流程"><a href="#二-操作流程" class="headerlink" title="二.操作流程"></a>二.操作流程</h2><p><img src="https://raw.githubusercontent.com/yangsiyuan0/GitPic/master/evernote/Spring%20Data%20repository.png" alt=""></p>
<blockquote>
<p>在Spring Data repository 抽象的接口中心是仓库(Repository).</p>
</blockquote>
<h3 id="1-定义repository接口"><a href="#1-定义repository接口" class="headerlink" title="1. 定义repository接口"></a>1. 定义repository接口</h3><blockquote>
<p>自定义一个接口，继承某个Repository的子接口(<code>需要泛型注入Entity类和一个主键类型</code>)</p>
<ul>
<li>子接口举隅<ul>
<li><code>如果对象要实现CRUD操作，需要继承CrudRepository接口</code></li>
<li><code>如果还要在此基础上实现分页查询，需要继承PagingAndSortingRepository接口</code></li>
</ul>
</li>
<li>repository调整<ul>
<li><code>除了继承Spring Data接口，也能通过@RepositoryDefinition声明自定义的Repository接口</code></li>
<li><code>在自定义接口中，可以选择性地暴露某些method，从而实现定义自己的抽象</code><br>【暴露的接口，会通过动态代理获取实现类(如SimpleJapRepository)的method】</li>
</ul>
</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个基础接口，供所有的domain接口使用(暴露findOne，save方法)</span></span><br><span class="line"><span class="meta">@NoRepositoryBean</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyBaseRepository</span>&lt;<span class="title">T</span> <span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt; <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">T</span>,<span class="title">ID</span>&gt;</span>&#123;</span><br><span class="line">     <span class="function">T <span class="title">findOne</span><span class="params">(ID id)</span></span>;</span><br><span class="line">     <span class="function">T <span class="title">save</span><span class="params">(T entity)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继承基础接口（暴露通过email查询对象的方法）</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">MyBaseRepository</span>&lt;<span class="title">User</span>,<span class="title">Long</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function">User <span class="title">findByEmailAddress</span><span class="params">(EmailAddress emailAddress)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-定义查询method"><a href="#2-定义查询method" class="headerlink" title="2. 定义查询method"></a>2. 定义查询method</h3><blockquote>
<p>Repository代理提供两种方式获取特定查询<br><code>依据方法名直接导出查询</code> + <code>手动定义查询</code></p>
</blockquote>
<h4 id="2-1-查找策略"><a href="#2-1-查找策略" class="headerlink" title="2.1  查找策略"></a>2.1  查找策略</h4><p><code>可用于仓库基础结构来解决查询</code></p>
<blockquote>
<ul>
<li>实现方式：<ul>
<li><code>xml配置(query-lookup-strategy属性)</code></li>
<li><code>注解声明(Enable${store}Repositories中声明queryLookupStrategy属性)</code></li>
</ul>
</li>
<li>策略分类 <ul>
<li><code>CREATE：通过查询方法名构建一个特别的数据查询</code></li>
<li><code>USE_DECLARED_QUERY：尝试找到一个声明查询并在找不到的时候抛出一个异常</code></li>
<li><code>CREATE_IF_NOT_FOUND：综合上述两者的功能</code></li>
</ul>
</li>
</ul>
</blockquote>
<h4 id="2-2-创建查询"><a href="#2-2-创建查询" class="headerlink" title="2.2 创建查询"></a>2.2 创建查询</h4><blockquote>
<p>内置的查询生成器会剔除方法名中的关键字（<code>诸如find/read/query/count/get...by</code>），并解析剩下的内容</p>
<ul>
<li><code>Distinct标志：</code></li>
<li><code>by：后面一般为查询条件，多个条件以and/or连接</code></li>
<li><code>属性表达式你也可以使用可支持的操作比如Between(区间查询),LessThan,GreaterThan,Like(模糊查询)</code></li>
<li><code>方法解析支持为某些属性设置一个IgnoreCase标志</code></li>
<li><code>通过增加一个OrderBy字段实现按照属性排序</code></li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonRepository</span> <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">user</span>,<span class="title">Long</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByEmailAddressAndLastname</span><span class="params">(EmailAddress emailAddress, String lastname)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Enables the distinct flag for the query</span></span><br><span class="line">    <span class="function">List&lt;Person&gt; <span class="title">findDistinctPeopleByLastnameOrFirstname</span><span class="params">(String lastname,String firstname)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Person&gt; <span class="title">findPeopleDistinctByLastnameOrFirstname</span><span class="params">(String lastname, String firstname)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Enabling ignoring case for an individual property</span></span><br><span class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByLastnameIgnoreCase</span><span class="params">(String lastname)</span></span>;</span><br><span class="line">    <span class="comment">// Enabling ignoring case for all suitable properties</span></span><br><span class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByLastnameAndFirstnameAllIgnoreCase</span><span class="params">(String lastname, String firstname)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Enabling static ORDER BY for a query</span></span><br><span class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByLastnameOrderByFirstnameAsc</span><span class="params">(String lastname)</span></span>;</span><br><span class="line">    <span class="function">List&lt;Person&gt; <span class="title">findByLastnameOrderByFirstnameDesc</span><span class="params">(String lastname)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-3-属性表达式"><a href="#2-3-属性表达式" class="headerlink" title="2.3 属性表达式"></a>2.3 属性表达式</h4><p><code>用于自定义条件查询</code></p>
<blockquote>
<p>属性表达式只能引用实体类的直接属性<br><code>内置查询器，依据固定规律，解析method名中的attribute作为查询条件</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解析：1. 创建属性遍历x.address.zipCode</span></span><br><span class="line"><span class="comment">//      2. 如果上述解析不成功：则会按照驼峰法则从右开始拆分：AddressZip + Code --&gt; Address + ZipCode</span></span><br><span class="line"><span class="function">List&lt;Person&gt; <span class="title">findByAddressZipCode</span><span class="params">(ZipCode zipCode)</span></span>;</span><br><span class="line"><span class="comment">// 利用下划线(_)可以解决上述2中的歧义 【前提：Java属性命名中严格规范，不要使用下划线】</span></span><br><span class="line"><span class="function">List&lt;Person&gt; <span class="title">findByAddress_ZipCode</span><span class="params">(ZipCode zipCode)</span></span>;</span><br></pre></td></tr></table></figure>
<h4 id="2-4-特殊参数处理"><a href="#2-4-特殊参数处理" class="headerlink" title="2.4 特殊参数处理"></a>2.4 特殊参数处理</h4><blockquote>
<ul>
<li>Pageable：</li>
<li>Slice：</li>
<li>Sort：</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 利用Spring框架提供的Pageable实例，来动态地实现添加分页</span></span><br><span class="line"><span class="function">Page&lt;User&gt; <span class="title">findByLastname</span><span class="params">(String lastname, Pageable pageable)</span></span>;</span><br><span class="line"><span class="comment">// Slice仅仅知道是否有下一个Slice可用（消耗更小）</span></span><br><span class="line"><span class="function">Slice&lt;User&gt; <span class="title">findByLastname</span><span class="params">(String lastname, Pageable pageable)</span></span>;</span><br><span class="line"><span class="comment">// 利用...Sort实例实现排序</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findByLastname</span><span class="params">(String lastname, Sort sort)</span></span>;k</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findByLastname</span><span class="params">(String lastname, Pageable pageable)</span></span>;</span><br></pre></td></tr></table></figure>
<h4 id="2-5-限制查询"><a href="#2-5-限制查询" class="headerlink" title="2.5 限制查询"></a>2.5 限制查询</h4><blockquote>
<p>关键字：<code>first</code>、<code>top</code>  （用于限制结果数）</p>
<ul>
<li><code>默认值为1，可以交替使用</code></li>
<li><code>可以使用distinct</code></li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">User <span class="title">findFirstByOrderByLastnameAsc</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">User <span class="title">findTopByOrderByAgeDesc</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">Page&lt;User&gt; <span class="title">queryFirst10ByLastname</span><span class="params">(String lastname, Pageable pageable)</span></span>;</span><br><span class="line"><span class="function">Slice&lt;User&gt; <span class="title">findTop3ByLastname</span><span class="params">(String lastname, Pageable pageable)</span></span>;</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findFirst10ByLastname</span><span class="params">(String lastname, Sort sort)</span></span>;</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findTop10ByLastname</span><span class="params">(String lastname, Pageable pageable)</span></span>;</span><br></pre></td></tr></table></figure>
<h4 id="2-6-流查询"><a href="#2-6-流查询" class="headerlink" title="2.6 流查询"></a>2.6 流查询</h4><p><code>Stream</code></p>
<blockquote>
<p>查询方法能对以JAVA 8的Stream为返回的结果进行逐步处理<br><code>一个数据流可能包裹底层数据存储特定资源，因此在使用后必须关闭。 你也可以使用close()方法或者JAVA 7 try-with-resources区块手动关闭数据流</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Query</span>(<span class="string">"select u from User u"</span>)</span><br><span class="line"><span class="function">Stream&lt;User&gt; <span class="title">findAllByCustomQueryAndStream</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Stream&lt;User&gt; <span class="title">readAllByFirstnameNotNull</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Query</span>(<span class="string">"select u from User u"</span>)</span><br><span class="line"><span class="function">Stream&lt;User&gt; <span class="title">streamAllPaged</span><span class="params">(Pageable pageable)</span></span>;</span><br></pre></td></tr></table></figure>
<h3 id="3-创建repository实例"><a href="#3-创建repository实例" class="headerlink" title="3. 创建repository实例"></a>3. 创建repository实例</h3><blockquote>
<p>使用namespace，创建repository接口的bean实例</p>
</blockquote>
<ul>
<li>XML配置<blockquote>
<p><code>每一个Spring Data模块都包含repositories元素，因此简单的基于base-package定义即可进行Spring扫描</code></p>
</blockquote>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:beans</span> <span class="attr">xmlns:beans</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/data/jpa"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/data/jpa</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/data/jpa/spring-jpa.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">repositories</span> <span class="attr">base-package</span>=<span class="string">"com.acme.repositories"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>JavaConfig<blockquote>
<p>在一个JavaConfig类中使用<code>@Enable${store}Repositories</code>声明来触发repository的构建  </p>
</blockquote>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JPA声明</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableJpaRepositories</span>(<span class="string">"com.acme.repositories"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplicationConfiguration</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> EntityManagerFactory <span class="title">entityManagerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// …</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>独立使用<blockquote>
<p>可以在spring容器外使用repository组件</p>
</blockquote>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RepositoryFactorySupport factory = … <span class="comment">// Instantiate factory here</span></span><br><span class="line">UserRepository repository = factory.getRepository(UserRepository.class);</span><br></pre></td></tr></table></figure>

<h3 id="4-自定义实现repositories"><a href="#4-自定义实现repositories" class="headerlink" title="4. 自定义实现repositories"></a>4. 自定义实现repositories</h3><blockquote>
<p>允许实现自定义的功能（<code>包括CRUD和查询功能</code>）</p>
</blockquote>
<h4 id="4-1-针对单一repositories"><a href="#4-1-针对单一repositories" class="headerlink" title="4.1 针对单一repositories"></a>4.1 针对单一repositories</h4><blockquote>
<p>自定义接口，并实现接口的方法，使用自定义的</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">UserRepositoryCustom</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">someCustomMethod</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRepositoryImpl</span> <span class="keyword">implements</span> <span class="title">UserRepositoryCustom</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">someCustomMethod</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">	  <span class="comment">// Your custom implementation</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt;, <span class="title">UserRepositoryCustom</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Declare query methods here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-2-针对所有repositories"><a href="#4-2-针对所有repositories" class="headerlink" title="4.2 针对所有repositories"></a>4.2 针对所有repositories</h4><blockquote>
<p>添加自定义行为到所有的repository中</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NoRepositoryBean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="keyword">extends</span> <span class="title">PagingAndSortingRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">sharedCustomMethod</span><span class="params">(ID id)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRepositoryImpl</span>&lt;<span class="title">T</span>, <span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="keyword">extends</span> <span class="title">SimpleJpaRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; <span class="keyword">implements</span> <span class="title">MyRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> EntityManager entityManager;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyRepositoryImpl</span><span class="params">(JpaEntityInformation entityInformation,</span></span></span><br><span class="line"><span class="function"><span class="params">	                        EntityManager entityManager)</span> </span>&#123;</span><br><span class="line">	  <span class="keyword">super</span>(entityInformation, entityManager);</span><br><span class="line">	  <span class="comment">// Keep the EntityManager around to used from the newly introduced methods.</span></span><br><span class="line">	  <span class="keyword">this</span>.entityManager = entityManager;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sharedCustomMethod</span><span class="params">(ID id)</span> </span>&#123;</span><br><span class="line">	  <span class="comment">// implementation goes here</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="三-常用API-★★★"><a href="#三-常用API-★★★" class="headerlink" title="三. 常用API(★★★)"></a>三. 常用API(★★★)</h2><blockquote>
<p>本章节主要概述自定义数据库操作语句（<code>即Spring框架中repository实现类中未定义的sql</code>）</p>
</blockquote>
<h3 id="1-条件查询"><a href="#1-条件查询" class="headerlink" title="1. 条件查询"></a>1. 条件查询</h3><h4 id="1-1-根据method名自动生成"><a href="#1-1-根据method名自动生成" class="headerlink" title="1.1 根据method名自动生成"></a>1.1 根据method名自动生成</h4><p><code>即利用属性表达式(Property expressions)</code></p>
<blockquote>
<p>在接口中定义方法(<code>利用关键字</code> + <code>按照固定格式</code>)，无需实现，内置查询器会自动生成并在调用方法时注入相应的查询语句</p>
<ul>
<li><code>精确查询一列：findBy列名</code></li>
<li><code>模糊查询一列：findBy列名Like</code></li>
<li><code>精确查询多列：findBy列名And列名Like</code> 【按照驼峰命名】</li>
</ul>
</blockquote>
<h4 id="1-2-配置-Query-★"><a href="#1-2-配置-Query-★" class="headerlink" title="1.2 配置@Query (★)"></a>1.2 配置@Query (★)</h4><blockquote>
<p>当方法名不按命名规则写的查询方法，可以配置@Query 绑定JPAL语句或者SQL语句</p>
<ul>
<li><code>使用</code><strong><code>JPAL</code></strong><code>语句，设置属性nativeQuery=false</code><br>【<code>实际上，JPAL语句，在语法上完全同HQL，只是称谓不同</code>】</li>
<li><code>使用</code><strong><code>SQL</code></strong><code>语句，设置属性nativeQuery=true</code></li>
</ul>
</blockquote>
<h4 id="1-3-实体类上配置-NamedQuery"><a href="#1-3-实体类上配置-NamedQuery" class="headerlink" title="1.3 实体类上配置@NamedQuery"></a>1.3 实体类上配置@NamedQuery</h4><blockquote>
<p>在接口的方法上配置<code>@Query</code>，并在实体类上定义<code>@NamedQuery(name=&quot;方法名&quot;，query=&quot;语句&quot;)</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StandardRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Standard</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">	<span class="comment">// 1.1 根据方法名自动生成 </span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;Standard&gt; <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 1.2 配置@Query</span></span><br><span class="line">	<span class="meta">@Query</span>(value=<span class="string">"from Standard where name = ?"</span> ,nativeQuery=<span class="keyword">false</span>)</span><br><span class="line">	<span class="comment">// nativeQuery 为 false 配置JPQL 、 为true 配置SQL </span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;Standard&gt; <span class="title">queryName</span><span class="params">(String name)</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 1.3 配置@Query不写语句【然后在实体类中通过@NamedQuery定义】</span></span><br><span class="line">	<span class="meta">@Query</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;Standard&gt; <span class="title">queryName2</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">////// 1.3 实体类中的定义【声明在类上】</span></span><br><span class="line"><span class="meta">@NamedQueries</span>(&#123;</span><br><span class="line">	<span class="meta">@NamedQuery</span>(name=<span class="string">"Standard.queryName2"</span>,query=<span class="string">"from Standard where name=?"</span>)&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="2-带条件修改"><a href="#2-带条件修改" class="headerlink" title="2. 带条件修改"></a>2. 带条件修改</h3><blockquote>
<p>使用<code>@Query</code>注解完成 ， 搭配使用<code>@Modifying</code>标记修改、删除操作</p>
<ul>
<li><code>在测试test中进行增删改操作时，需要在test方法上设置事务，并手动定义不rollback</code></li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义修改的方法</span></span><br><span class="line"><span class="meta">@Query</span>(value=<span class="string">"update Standard set minLength=?2 where id =?1"</span>)</span><br><span class="line"><span class="meta">@Modifying</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateMinLength</span><span class="params">(Integer id , Integer minLength)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在test中进行测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Transactional</span>  <span class="comment">// 声明事务</span></span><br><span class="line"><span class="meta">@Rollback</span>(<span class="keyword">false</span>) <span class="comment">// 声明不回滚（默认在test中操作结束，自动回滚）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">	standRepository.updateMinLength(<span class="number">1</span>,<span class="number">15</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-分页查询"><a href="#3-分页查询" class="headerlink" title="3. 分页查询"></a>3. 分页查询</h3><blockquote>
<ul>
<li>Spring Data提供的标准接口PagingAndSortingRepository中，定义了实现分页的方法<ul>
<li><code>Page&lt;T&gt; findAll(Pageable pageable)</code></li>
</ul>
</li>
<li><strong>参数</strong>：<code>SpringData提供了PageRequest对象，作为Pageable接口的实现类</code><br>【<code>注意：PageRequest的page页码从0开始</code>】<ul>
<li><code>public PageRequest(int page, int size)</code> 【构造器】</li>
<li><code>public PageRequest(int page, int size, Sort sort)</code></li>
</ul>
</li>
<li><strong>返回值</strong>：<code>分页的查询结果，会被自动封装为Page&lt;T&gt;</code><ul>
<li><code>总页数：TotalPages</code></li>
<li><code>页面详情：TotalElements</code></li>
</ul>
</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实例化Pageable对象(传入参数：当前页码，当前页总记录数)</span></span><br><span class="line">Pageable pageable = <span class="keyword">new</span> PageRequest(page - <span class="number">1</span>, rows);<span class="comment">//PageRequest的page页码从0开始，所以进行-1</span></span><br><span class="line"><span class="comment">// 调用findAll方法，返回结果自动封装为Page&lt;T&gt;类型</span></span><br><span class="line">Page&lt;Standard&gt; pageData = standardRepository.findAll(pageable);</span><br></pre></td></tr></table></figure>
<h3 id="4-查询关键字"><a href="#4-查询关键字" class="headerlink" title="4. 查询关键字"></a>4. 查询关键字</h3><blockquote>
<p>在method名称中可以使用的<br><img src="https://raw.githubusercontent.com/yangsiyuan0/GitPic/master/evernote/SpringDataApi1.png" alt=""><br><img src="https://raw.githubusercontent.com/yangsiyuan0/GitPic/master/evernote/SpringDataApi.png" alt=""><br><img src="https://raw.githubusercontent.com/yangsiyuan0/GitPic/master/evernote/SpringDataApi2.png" alt=""></p>
</blockquote>
<h2 id="四-参考文档"><a href="#四-参考文档" class="headerlink" title="四. 参考文档"></a>四. 参考文档</h2><h3 id="1-简介-1"><a href="#1-简介-1" class="headerlink" title="1. 简介"></a>1. 简介</h3><h4 id="1-1-命名空间-namespace"><a href="#1-1-命名空间-namespace" class="headerlink" title="1.1 命名空间(namespace)"></a>1.1 命名空间(namespace)</h4><blockquote>
<p>Spring Data的JPA模块包含一个允许定义存储库bean的自定义命名空间（<code>包含JPA特有的某些特征和元素属性</code>）</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:jpa</span>=<span class="string">"http://www.springframework.org/schema/data/jpa"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/data/jpa</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/data/jpa/spring-jpa.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">jpa:repositories</span> <span class="attr">base-package</span>=<span class="string">"com.acme.repositories"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="1-2-注解配置"><a href="#1-2-注解配置" class="headerlink" title="1.2 注解配置"></a>1.2 注解配置</h4><blockquote>
<p>Spring Data JPA存储库支持不仅可以通过XML命名空间激活，还可以通过JavaConfig使用注释</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableJpaRepositories</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplicationConfig</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    EmbeddedDatabaseBuilder builder = <span class="keyword">new</span> EmbeddedDatabaseBuilder();</span><br><span class="line">    <span class="keyword">return</span> builder.setType(EmbeddedDatabaseType.HSQL).build();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 重点：创建LocalContainerEntityManagerFactoryBean而不是EntityManagerFactory</span></span><br><span class="line"><span class="comment">// （因为前者包含了异常机制）</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> LocalContainerEntityManagerFactoryBean <span class="title">entityManagerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    HibernateJpaVendorAdapter vendorAdapter = <span class="keyword">new</span> HibernateJpaVendorAdapter();</span><br><span class="line">    vendorAdapter.setGenerateDdl(<span class="keyword">true</span>);</span><br><span class="line">    LocalContainerEntityManagerFactoryBean factory = <span class="keyword">new</span> LocalContainerEntityManagerFactoryBean();</span><br><span class="line">    factory.setJpaVendorAdapter(vendorAdapter);</span><br><span class="line">    factory.setPackagesToScan(<span class="string">"com.acme.domain"</span>);</span><br><span class="line">    factory.setDataSource(dataSource());</span><br><span class="line">    <span class="keyword">return</span> factory;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">transactionManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    JpaTransactionManager txManager = <span class="keyword">new</span> JpaTransactionManager();</span><br><span class="line">    txManager.setEntityManagerFactory(entityManagerFactory());</span><br><span class="line">    <span class="keyword">return</span> txManager;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-持久化实体"><a href="#2-持久化实体" class="headerlink" title="2. 持久化实体"></a>2. 持久化实体</h3><h3 id="3-查询方法"><a href="#3-查询方法" class="headerlink" title="3. 查询方法"></a>3. 查询方法</h3><h3 id="4-存储过程"><a href="#4-存储过程" class="headerlink" title="4. 存储过程"></a>4. 存储过程</h3><h3 id="5-事务管理"><a href="#5-事务管理" class="headerlink" title="5. 事务管理"></a>5. 事务管理</h3><h3 id="6-审查"><a href="#6-审查" class="headerlink" title="6. 审查"></a>6. 审查</h3>]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
        <tag>SpringData</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>服务注册与发现</title>
    <url>/2019/10/23/%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/</url>
    <content><![CDATA[<h3 id="1-Spring版本说明"><a href="#1-Spring版本说明" class="headerlink" title="1. Spring版本说明"></a>1. Spring版本说明</h3><p>本文档对工业界常用的服务治理框架、及其对应的技术栈进行预研。相关技术栈均基于JDK + Spring生态，因此在探索具体的服务治理框架之前，我们需要先对jdk、spring、springBoot、springCloud的相关版本进行相关梳理及选定：</p>
<table>
<thead>
<tr>
<th align="left">Spring Framework</th>
<th align="left">springBoot</th>
<th align="left">springCloud</th>
<th align="left">JDK</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Spring Framework 4.3.7.RELEASE</td>
<td align="left">1.5.2.RELEASE</td>
<td align="left">Dalston.RC1</td>
<td align="left">JDK6-8</td>
</tr>
<tr>
<td align="left">Spring Framework 4.3.13.RELEASE</td>
<td align="left">1.5.9.RELEASE</td>
<td align="left">Edgware.RELEASE</td>
<td align="left">JDK6-8</td>
</tr>
<tr>
<td align="left">Spring Framework 5.0.6.RELEASE</td>
<td align="left">2.0.2.RELEASE</td>
<td align="left">Finchley.BUILD-SNAPSHOT</td>
<td align="left">JDK8-10</td>
</tr>
<tr>
<td align="left"><strong>Spring Framework 5.0.7.RELEASE</strong></td>
<td align="left"><strong>2.0.3.RELEASE</strong></td>
<td align="left"><strong>Finchley.RELEASE</strong></td>
<td align="left"><strong>JDK8-10</strong></td>
</tr>
<tr>
<td align="left">Spring Framework 5.1.2.RELEASE</td>
<td align="left">2.1.x.RELEASE**</td>
<td align="left">Greenwich</td>
<td align="left">JDK8-12</td>
</tr>
<tr>
<td align="left">Spring Framework 5.*</td>
<td align="left">2.2.x.RELEASE</td>
<td align="left">Hoxton</td>
<td align="left">JDK8-12</td>
</tr>
</tbody></table>
<p>根据spring官方说明，<code>Spring Framework 5.1.*为目前的推荐版本</code>，对该版本的官方支持将持续到2019年底，而后将由5.2.<em>版本取代，而就springCloud的生态演进而言，Finchley版本相较于Dalston，有了极大的丰富与优化。<br>因此，本文档相关技术栈均基于*</em>SpringCloud Finchley**版本</p>
<blockquote>
<p><strong>关于SpringBoot的版本时间线如下：</strong></p>
<ul>
<li>2014年04月01号，Spring Boot 发布 v1.0.0.RELEASE，Spring Boot 正式商用</li>
<li>2014年06月11号，Spring Boot 发布 v1.1.0.RELEASE，主要修复了若干 Bug</li>
<li>2014年12月11号，Spring Boot 发布 v1.2.0.RELEASE，此版本更新的特性比较多，主要集成了 Servlet 3.1，支持 JTA、J2EE 等。</li>
<li>2015年11月16号，Spring Boot 发布 v1.3.0.RELEASE，增加了新 spring-boot-devtools 模块，缓存自动配置、颜色 banners 等新特性。</li>
<li>2016年07月29号，Spring Boot 发布 v1.4.0.RELEASE，以 Spring 4.3 为基础进行的构建，更新了很多第三方库的支持，重点增加了 Neo4J, Couchbase、 Redis 等 Nosql 的支持。</li>
<li>2017年01月30号，Spring Boot 发布 v1.5.0.RELEASE，更新了动态日志修改，增加 Apache Kafka、LDAP、事物管理等特性的支持。</li>
<li>2018年03月01号，Spring Boot 发布 v2.0.0.RELEASE</li>
<li>2018年10月30号，Spring Boot 发布 v2.1.0.RELEASE</li>
</ul>
</blockquote>
<h3 id="2-CAP原则"><a href="#2-CAP原则" class="headerlink" title="2. CAP原则"></a>2. CAP原则</h3><p>CAP原则又称CAP定理(1998年由加州大学的计算机科学家 Eric Brewer 提出)，指的是在一个分布式系统中有三个指标：一致性（Consistency）、可用性（Availability）、分区容错性（Partition tolerance）</p>
<p>CAP 原则指的是，<code>这三个指标最多只能同时实现两点，不可能三者兼顾</code></p>
<ul>
<li><strong>一致性（C）</strong>：在分布式系统中的所有数据备份，在同一时刻是否同样的值。（等同于所有节点访问同一份最新的数据副本）</li>
<li><strong>可用性（A）</strong>：在集群中一部分节点故障后，集群整体是否还能响应客户端的读写请求。（对数据更新具备高可用性）</li>
<li><strong>分区容忍性（P）</strong>：以实际效果而言，分区相当于对通信的时限要求。系统如果不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在C和A之间做出选择【分区由网络故障、机器故障导致，具有外部不可抗力性，无法控制，是必选项】。</li>
</ul>
<p><strong>即：设计分布式数据系统，就是在一致性和可用性之间取一个平衡</strong></p>
<table>
<thead>
<tr>
<th align="left">组件名</th>
<th align="left">CAP</th>
<th align="left">一致性算法</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Eureka</td>
<td align="left">AP</td>
<td align="left">无</td>
</tr>
<tr>
<td align="left">Consul</td>
<td align="left">CP</td>
<td align="left">Raft</td>
</tr>
<tr>
<td align="left">Zookeeper</td>
<td align="left">CP</td>
<td align="left">Paxos</td>
</tr>
<tr>
<td align="left">etcd</td>
<td align="left">CP</td>
<td align="left">Raft</td>
</tr>
<tr>
<td align="left">nacos</td>
<td align="left">AP</td>
<td align="left">Raft</td>
</tr>
</tbody></table>
<h2 id="二-常用服务治理框架"><a href="#二-常用服务治理框架" class="headerlink" title="二.常用服务治理框架"></a>二.常用服务治理框架</h2><h3 id="1-Eureka"><a href="#1-Eureka" class="headerlink" title="1. Eureka(*)"></a>1. Eureka(*)</h3><p>Eureka是Netflix开发的服务发现框架，本身是一个基于REST的服务，SpringCloud将它集成在其子项目spring-cloud-netflix中，以实现SpringCloud的服务发现功能。其也是<strong>目前使用最广泛的服务发现框架</strong>。<br>Eureka包含两个组件：Eureka Server(<code>即服务端，注册中心</code>)和Eureka Client(<code>即客户端，服务提供者/消费者</code>)</p>
<ol>
<li>服务提供者在启动时，向注册中心注册自己提供的服务。</li>
<li>服务消费者在启动时，向注册中心订阅自己所需的服务。</li>
<li>注册中心返回服务提供者地址给消费者。</li>
<li>服务消费者从提供者地址中调用消费者<br><img src="en-resource://database/5773:1" alt="d810ebfac7c63d66515eec9ae47d5eae.png"></li>
</ol>
<h3 id="2-Consul"><a href="#2-Consul" class="headerlink" title="2. Consul"></a>2. Consul</h3><p>Spring Cloud Consul项目是针对Consul的服务治理实现。Consul 是 HashiCorp 公司推出的开源工具，用于实现分布式系统的服务发现与配置，它包含多个组件，但是作为一个整体，在微服务架构中为我们的基础设施提供服务发现和服务配置的工具。</p>
<ul>
<li>使用Go语言编写，支持win、linux、mac全平台</li>
<li>Consul和Eureka不同，Eureka只需要在项目中加入服务端依赖，就可以作为服务端使用；Consul需要从官网下载，并单独安装</li>
<li>Consul服务器使用 Raft 协议(<code>要求必须过半数的节点都写入成功才认为注册成功 Leader 挂掉时，重新选举期间整个 Consul 不可用</code>)复制状态，保证了强一致性。相较于Eurake，高可用及效率均有损失。</li>
</ul>
<p><img src="en-resource://database/5767:1" alt="d6a016b0ac5ee80914c24f1799beaafd.png"></p>
<h3 id="3-Dubbo-Zookeeper"><a href="#3-Dubbo-Zookeeper" class="headerlink" title="3. Dubbo+Zookeeper"></a>3. Dubbo+Zookeeper</h3><p>Dubbo是一个由阿里巴巴开源的分布式服务框架，提供面向接口的远程方法调用(RPC)，智能容错和负载均衡，以及服务自动注册和发现等功能，其直接使用socket通信。传输效率高。Dubbo主要作用是提供服务治理<br>ZooKeeper是一个开源的分布式协调服务，为分布式应用提供配置维护、域名服务、分布式同步、组服务等功能。ZooKeeper是Dubbo的推荐注册中心，提供服务注册功能（<code>Dubbo也还可以搭配其他注册中心：Multicast注册中、Redis注册中心、Simple注册中心</code>）</p>
<p><em>PS：最新Spring社区孵化的Spring Cloud Alibaba，默认选用了Nacos作为注册中心，可以更加便捷地使用Ribbon或Feign来实现服务消费</em></p>
<h3 id="4-Nacos"><a href="#4-Nacos" class="headerlink" title="4. Nacos"></a>4. Nacos</h3><p>Nacos是由阿里巴巴开源的动态服务发现、配置管理和服务管理平台。Nacos提供了如下关键特性：服务发现和服务健康监测、动态配置服务、动态 DNS 服务、服务及其元数据管理。<br>和Consul一样，Nacos也需要从官网下载服务，进行单独启动<br><code>下图为Nacos官网提供的架构图：</code><br><img src="en-resource://database/5769:1" alt="352af1f2eb7fbf5f65e869893ac99633.png"></p>
<h3 id="5-etcd"><a href="#5-etcd" class="headerlink" title="5. etcd"></a>5. etcd</h3><p>etcd是一个采用http协议的分布式键值对存储系统，因其易用，简单。很多系统都采用或支持etcd作为服务发现的一部分，比如kubernetes。但其只是一个存储系统，如果想要提供完整的服务发现功能，必须搭配一些第三方的工具，搭建操作相对麻烦。</p>
<h3 id="6-SpringCloud-Alibaba"><a href="#6-SpringCloud-Alibaba" class="headerlink" title="6. SpringCloud Alibaba"></a>6. SpringCloud Alibaba</h3><p>SpringCloud Alibaba作为一款<code>旨在打造更符合中国国情的微服务体系</code>的开源组件，目前主要提供了服务发现、配置管理、高可用防护、基于RocketMQ的消息中间件等功能。其既提供了基于Nacos+Ribbon/Feign的服务治理方案，又支持基于Nacos+Dubbo的rpc服务治理方案。<br><code>下图nacas启动后的管理界面:</code></p>
<h2 id="三-Eureka项目实践"><a href="#三-Eureka项目实践" class="headerlink" title="三. Eureka项目实践"></a>三. Eureka项目实践</h2><h3 id="1-Eureka注册中心搭建-单机"><a href="#1-Eureka注册中心搭建-单机" class="headerlink" title="1. Eureka注册中心搭建(单机)"></a>1. Eureka注册中心搭建(单机)</h3><h4 id="1-pom依赖"><a href="#1-pom依赖" class="headerlink" title="1). pom依赖"></a>1). pom依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--eureka依赖【Springboot1.x中 artifactId 为 spring-cloud-starter-netflix-eureka-server，注意区分】--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="2-启动类注解"><a href="#2-启动类注解" class="headerlink" title="2). 启动类注解"></a>2). 启动类注解</h4><p>通过在启动类上添加注解<code>@EnableEurekaServer</code>，为该应用开启注册中心功能</p>
<h4 id="3-application-properties配置"><a href="#3-application-properties配置" class="headerlink" title="3). application.properties配置"></a>3). application.properties配置</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务名称</span></span><br><span class="line"><span class="string">spring.application.name=NewsEditingSuitCenter</span></span><br><span class="line"><span class="comment"># 服务端口号</span></span><br><span class="line"><span class="string">server.port=1111</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#主机名</span></span><br><span class="line"><span class="string">eureka.instance.hostname=eureka1</span></span><br><span class="line"><span class="comment">#服务名，默认取spring.application.name 配置值，没有则显示unknown</span></span><br><span class="line"><span class="comment">#eureka.instance.appname=NewsEditingSuitCenter</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注册时显示ip【即在eureka管理页面显示的格式为ip地址】</span></span><br><span class="line"><span class="string">eureka.instance.prefer-ip-address=false</span></span><br><span class="line"><span class="comment">#注册时显示ip的配置方案【spring.cloud.client.ip-address即为本机ip】</span></span><br><span class="line"><span class="comment">#eureka.instance.prefer-ip-address=true</span></span><br><span class="line"><span class="comment">#eureka.instance.hostname=$&#123;spring.cloud.client.ip-address&#125;</span></span><br><span class="line"><span class="comment">#eureka.instance.instance-id=$&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#表示是否将自己注册在EurekaServer上，默认为true。由于当前应用就是EurekaServer，所以置为false</span></span><br><span class="line"><span class="string">eureka.client.register-with-eureka=false</span></span><br><span class="line"><span class="comment">#表示表示是否从EurekaServer获取注册信息，默认为true。单节点不需要同步其他的EurekaServer节点的数据</span></span><br><span class="line"><span class="string">eureka.client.fetch-registry=false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#eureka server地址</span></span><br><span class="line"><span class="string">eureka.client.serviceUrl.defaultZone=http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭自我保护(生产时打开该选项)</span></span><br><span class="line"><span class="comment">#如果在15分钟内超过85%的客户端节点都没有正常的心跳，那么Eureka就认为客户端与注册中心出现了网络故障，Eureka Server自动进入自我保护机制</span></span><br><span class="line"><span class="comment">#1. 不再从注册列表中移除因为长时间没收到心跳而应该过期的服务、</span></span><br><span class="line"><span class="comment">#2. 仍然能够接受新服务的注册和查询请求，但是不会被同步到其它节点、</span></span><br><span class="line"><span class="comment">#3. 当网络稳定时，当前Eureka Server新的注册信息会被同步到其它节点中</span></span><br><span class="line"><span class="string">eureka.server.enable-self-preservation=false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#扫描失效服务的间隔时间（缺省为60*1000ms）</span></span><br><span class="line"><span class="string">eureka.server.eviction-interval-timer-in-ms=5000</span></span><br></pre></td></tr></table></figure>

<h3 id="2-Eureka注册中心实现高可用"><a href="#2-Eureka注册中心实现高可用" class="headerlink" title="2. Eureka注册中心实现高可用"></a>2. Eureka注册中心实现高可用</h3><p>运行多个Eureka server实例，并进行互相注册即可实现注册中心的高可用<br>Eureka不允许在单台主机(即同一个ip)上搭建高可用服务，可以利用本机hosts文件构造本地域名来模拟多机，下述过程即是采用该方式进行搭建</p>
<h4 id="1-hosts文件配置"><a href="#1-hosts文件配置" class="headerlink" title="1). hosts文件配置"></a>1). hosts文件配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1 eureka1</span><br><span class="line">127.0.0.1 eureka2</span><br><span class="line">127.0.0.1 eureka3</span><br></pre></td></tr></table></figure>

<h4 id="2-搭建多个Eureka-server"><a href="#2-搭建多个Eureka-server" class="headerlink" title="2). 搭建多个Eureka server"></a>2). 搭建多个Eureka server</h4><p>将上文”<code>1. Eureka注册中心搭建(单机)</code>“中搭建的项目，复制多个即可</p>
<h4 id="3-修改Eureka-server服务的application-properties配置"><a href="#3-修改Eureka-server服务的application-properties配置" class="headerlink" title="3). 修改Eureka server服务的application.properties配置"></a>3). 修改Eureka server服务的application.properties配置</h4><ul>
<li>节点1配置</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务名称</span></span><br><span class="line"><span class="string">spring.application.name=NewsEditingSuitCenter</span></span><br><span class="line"><span class="comment"># 服务端口号</span></span><br><span class="line"><span class="string">server.port=1111</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#主机名</span></span><br><span class="line"><span class="string">eureka.instance.hostname=eureka1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#是否将自己注册在EurekaServer上</span></span><br><span class="line"><span class="string">eureka.client.register-with-eureka=true</span></span><br><span class="line"><span class="comment">#是否从EurekaServer获取注册信息，多节点需要同步其他的EurekaServer节点的数据</span></span><br><span class="line"><span class="string">eureka.client.fetch-registry=true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#eureka server地址【指向其他节点地址】</span></span><br><span class="line"><span class="string">eureka.client.serviceUrl.defaultZone=http://eureka2:1112/eureka/,http://eureka3:1113/eureka/</span></span><br></pre></td></tr></table></figure>

<ul>
<li>节点2配置</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务名称</span></span><br><span class="line"><span class="string">spring.application.name=NewsEditingSuitCenter</span></span><br><span class="line"><span class="comment"># 服务端口号</span></span><br><span class="line"><span class="string">server.port=1112</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#主机名</span></span><br><span class="line"><span class="string">eureka.instance.hostname=eureka2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#是否将自己注册在EurekaServer上</span></span><br><span class="line"><span class="string">eureka.client.register-with-eureka=true</span></span><br><span class="line"><span class="comment">#是否从EurekaServer获取注册信息，多节点需要同步其他的EurekaServer节点的数据</span></span><br><span class="line"><span class="string">eureka.client.fetch-registry=true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#eureka server地址【指向其他节点地址】</span></span><br><span class="line"><span class="string">eureka.client.serviceUrl.defaultZone=http://eureka2:1112/eureka/,http://eureka3:1113/eureka/</span></span><br></pre></td></tr></table></figure>
<ul>
<li>节点3配置</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务名称</span></span><br><span class="line"><span class="string">spring.application.name=NewsEditingSuitCenter</span></span><br><span class="line"><span class="comment"># 服务端口号</span></span><br><span class="line"><span class="string">server.port=1113</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#主机名</span></span><br><span class="line"><span class="string">eureka.instance.hostname=eureka3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#是否将自己注册在EurekaServer上</span></span><br><span class="line"><span class="string">eureka.client.register-with-eureka=true</span></span><br><span class="line"><span class="comment">#是否从EurekaServer获取注册信息，多节点需要同步其他的EurekaServer节点的数据</span></span><br><span class="line"><span class="string">eureka.client.fetch-registry=true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#eureka server地址【指向其他节点地址】</span></span><br><span class="line"><span class="string">eureka.client.serviceUrl.defaultZone=http://eureka1:1111/eureka/,http://eureka2:1112/eureka/</span></span><br></pre></td></tr></table></figure>


<h3 id="3-注册服务至Eureka【构建生产者】"><a href="#3-注册服务至Eureka【构建生产者】" class="headerlink" title="3. 注册服务至Eureka【构建生产者】"></a>3. 注册服务至Eureka【构建生产者】</h3><p>此步骤，即将现有的快融服务注册到Eureka注册中心</p>
<h4 id="1-pom依赖-1"><a href="#1-pom依赖-1" class="headerlink" title="1). pom依赖"></a>1). pom依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- eureka client 适配springboot1.*--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;dependency&gt;            </span></span><br><span class="line"><span class="comment">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;            </span></span><br><span class="line"><span class="comment">    &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;       </span></span><br><span class="line"><span class="comment">&lt;/dependency&gt;  --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- eureka client 适配springboot2*--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="2-启动类注解-1"><a href="#2-启动类注解-1" class="headerlink" title="2). 启动类注解"></a>2). 启动类注解</h4><p>通过在启动类上添加注解`@EnableDiscoveryClient，激活Eureka中的DiscoveryClient实现，这样才能实现Controller中对服务信息的输出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ServletComponentScan</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.dayang.portal.db.dao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-application-properties配置-1"><a href="#3-application-properties配置-1" class="headerlink" title="3). application.properties配置"></a>3). application.properties配置</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务名称</span></span><br><span class="line"><span class="string">spring.application.name=dyportalserver</span></span><br><span class="line"><span class="comment"># 服务端口号</span></span><br><span class="line"><span class="string">server.port=9001</span></span><br><span class="line"><span class="comment">#eureka server地址</span></span><br><span class="line"><span class="string">eureka.client.serviceUrl.defaultZone=http://eureka1:1111/eureka/</span></span><br></pre></td></tr></table></figure>

<ul>
<li>进阶配置</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#状态页面的URL，相对路径,默认值是/info【https需要使用绝对路径配置eureka.instance.status-page-url】</span></span><br><span class="line"><span class="string">eureka.instance.status-page-url-path=$&#123;server.servlet.context-path&#125;/actuator/info</span></span><br><span class="line"><span class="comment">#健康检查页面的URL，相对路径,默认值是/health【https需要使用绝对路径配置eureka.instance.health-check-url】</span></span><br><span class="line"><span class="string">eureka.instance.health-check-url-path=$&#123;server.servlet.context-path&#125;/acturtor/health</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#该实例的主页url,相对路径【绝对路径：eureka.instance.home-page-url】</span></span><br><span class="line"><span class="comment">#eureka.instance.home-page-url-path=$&#123;server.servlet.context-path&#125;</span></span><br><span class="line"><span class="comment">#是否注册为服务</span></span><br><span class="line"><span class="string">eureka.client.register-with-eureka=true</span></span><br><span class="line"><span class="comment">#是否检索服务</span></span><br><span class="line"><span class="string">eureka.client.fetch-registry=true</span></span><br><span class="line"><span class="comment">############# 续约配置  ##############</span></span><br><span class="line"><span class="comment"># 心跳时间，即服务续约间隔时间（缺省为30s）</span></span><br><span class="line"><span class="string">eureka.instance.lease-renewal-interval-in-seconds=5</span></span><br><span class="line"><span class="comment"># 发呆时间，即服务续约到期时间（缺省为90s）</span></span><br><span class="line"><span class="string">eureka.instance.lease-expiration-duration-in-seconds=10</span></span><br><span class="line"><span class="comment"># 开启健康检查（依赖spring-boot-starter-actuator）</span></span><br><span class="line"><span class="string">eureka.client.healthcheck.enabled=true</span></span><br></pre></td></tr></table></figure>

<h3 id="4-基于Ribbon实现服务间调用【构建消费者】"><a href="#4-基于Ribbon实现服务间调用【构建消费者】" class="headerlink" title="4. 基于Ribbon实现服务间调用【构建消费者】"></a>4. 基于Ribbon实现服务间调用【构建消费者】</h3><p>Spring Cloud Ribbon是基于基于HTTP和TCP的客户端负载均衡的工具(<code>基于Netflix Ribbon实现</code>)，它被集成在springCloud的基础设施中，并不需要独立部署(简而言之，引入依赖开启配置即可使用)</p>
<p><strong>客户端负载均衡：</strong><br><code>区别于基于F5(硬件)、nginx(软件)等实现的服务端负载均衡，是将服务清单维护在服务端，按照算法进行请求分发；
客户端负载均衡，是由客户端(即服务消费者)自行维护服务节点清单【从Eureka server获取】，由客户端自行选择请求节点</code></p>
<pre><code>Ribbon实现客户端负载均衡的方式，是通过在客户端中配置ribbonServerList来设置服务端列表去轮询访问以达到均衡负载的作用。Ribbon与Eureka联合使用时，ribbonServerList会被DiscoveryEnabledNIWSServerList重写，扩展成从Eureka注册中心中获取服务实例列表。同时它也会用NIWSDiscoveryPing来取代IPing，它将职责委托给Eureka来确定服务端是否已经启动。(相应的，当Ribbon与Consul联合使用时，ribbonServerList会被ConsulServerList来扩展成从Consul获取服务实例列表。同时由ConsulPing来作为IPing接口的实现)</code></pre><h4 id="1-pom依赖-2"><a href="#1-pom依赖-2" class="headerlink" title="1). pom依赖"></a>1). pom依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="2-声明RestTemplate"><a href="#2-声明RestTemplate" class="headerlink" title="2). 声明RestTemplate"></a>2). 声明RestTemplate</h4><p>通过显示地声明一个RestTemplate对象，并添加注解<code>@LoadBalanced</code>，开启客户端负载均衡</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplicationpublic</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;       </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;            </span><br><span class="line">    <span class="keyword">new</span> SpringApplicationBuilder(Application.class).web(<span class="keyword">true</span>).run(args);     </span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: ysy</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: Spring Boot &gt;= 1.4版本，RestTemplate不再自动声明</span></span><br><span class="line"><span class="comment">     * 【<span class="doctag">@LoadBalanced</span>用于开启LoadBalancerInterceptor，实现通过服务名实现调用】</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">(RestTemplateBuilder </span></span></span><br><span class="line"><span class="function"><span class="params">builder)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// Do any additional configuration here</span></span><br><span class="line">       <span class="keyword">return</span> builder.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-利用RestTemplate发起请求"><a href="#3-利用RestTemplate发起请求" class="headerlink" title="3). 利用RestTemplate发起请求"></a>3). 利用RestTemplate发起请求</h4><p>RestTemplate是Spring提供的用于访问Rest服务的客户端，RestTemplate提供了多种便捷访问远程Http服务的方法。相较于我们目前使用的HTTPClient，大大提高客户端的编写效率。</p>
<p><code>关于httpClient、OkHttpClient、RestTemplate三者的比较，可以参见</code><a href="https://stackoverflow.com/questions/53795268/should-i-use-httpurlconnection-or-resttemplate" target="_blank" rel="noopener">HttpUrlConnection VS RestTemplate</a></p>
<blockquote>
<p><strong>RestTemplate常用API：</strong></p>
<ul>
<li>getForEntity(String url, Class<T> responseType, Object… uriVariables)</li>
<li>getForEntity(URI url, Class<T> responseType)</li>
<li>getForObject(String url, Class<T> responseType, Object… uriVariables)</li>
<li>getForObject(URI url, Class<T> responseType)</li>
<li>postForObject(URI url, @Nullable Object request, Class<T> responseType)</li>
<li>postForObject(String url, @Nullable Object request, Class<T> responseType, Object… uriVariables)</li>
<li>postForObject(String url, @Nullable Object request, Class<T> responseType,Map&lt;String, ?&gt; uriVariables)</li>
</ul>
</blockquote>
<ul>
<li><strong>GET请求样例【手动获取实例地址】</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取restTemplate对象</span></span><br><span class="line"><span class="meta">@Autowired</span>    </span><br><span class="line">LoadBalancerClient loadBalancerClient;    </span><br><span class="line"><span class="meta">@Autowired</span>    </span><br><span class="line">RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取服务地址</span></span><br><span class="line">ServiceInstance serviceInstance = loadBalancerClient.choose(<span class="string">"eureka-client"</span>);        </span><br><span class="line">String url = <span class="string">"http://"</span> + serviceInstance.getHost() + <span class="string">":"</span> + serviceInstance.getPort();</span><br><span class="line"><span class="comment">//第一个参数表示服务地址：dyportalserver为在Eureka中注册的服务名</span></span><br><span class="line"><span class="comment">//第二个参数表示返回值类型</span></span><br><span class="line"><span class="comment">//后续为可变参数，分别替换请求路径中的占位符变量</span></span><br><span class="line">String name = restTemplate.getForObject(url + <span class="string">"/test?name=&#123;1&#125;"</span>, String.class, <span class="string">"智新测试"</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>POST请求样例【自动获取实例地址】</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span>    </span><br><span class="line">RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一个参数表示服务地址：dyportalserver为在Eureka中注册的服务名</span></span><br><span class="line"><span class="comment">//第二个参数表示返回值类型</span></span><br><span class="line">CloudType cloudType = S.getForObject(<span class="string">"http://dyportalserver/UserInfoController/getCloudType"</span>, CloudType.class);</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>POST请求样例 【上面是理想转态，下面才是现实】</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span>    </span><br><span class="line">RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getCloudType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 返回json封装的数据</span></span><br><span class="line">      String res = restTemplate.postForObject(<span class="string">"http://"</span> + serviceName + contextPath +Constants_portal.CLOUDTYPE_ADDRESS_SUFFIX, <span class="keyword">null</span>, String.class);</span><br><span class="line">  <span class="comment">// 利用TypeToken对带泛型的对象进行反序列化</span></span><br><span class="line">      Type typeToken = <span class="keyword">new</span> TypeToken&lt;XtcpCommonReponse&lt;CloudType&gt;&gt;()&#123;&#125;.getType();</span><br><span class="line">      XtcpCommonReponse&lt;CloudType&gt; response = <span class="keyword">new</span> Gson().fromJson(res, typeToken);</span><br><span class="line">      logger.debug(<span class="string">"CloudType: "</span> + response.getData());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>POST请求样例【带参数】</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span>    </span><br><span class="line">RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getParameter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//构造请求头</span></span><br><span class="line">      HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">      headers.add(<span class="string">"userId"</span>, <span class="string">"admin"</span>);</span><br><span class="line">      headers.add(<span class="string">"tenantId"</span>, <span class="string">"dayang.com"</span>);</span><br><span class="line">      headers.add(<span class="string">"token"</span>, <span class="string">"token"</span>);</span><br><span class="line">      headers.setContentType(MediaType.MULTIPART_FORM_DATA);</span><br><span class="line">      <span class="comment">//构造请求体</span></span><br><span class="line">      MultiValueMap&lt;String, String&gt; map = <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class="line">      map.add(<span class="string">"parameterCode"</span>,<span class="string">"PUB_CRECRE"</span>);</span><br><span class="line">      HttpEntity&lt;MultiValueMap&lt;String, String&gt;&gt; formEntity = <span class="keyword">new</span> HttpEntity&lt;&gt;(map, headers);</span><br><span class="line">      <span class="comment">//发起请求</span></span><br><span class="line">      String res = restTemplate.postForObject(<span class="string">"http://"</span> + serviceName + contextPath + Constants_portal.PARAMETER_QUERY_ADDRESS_SUFFIX, formEntity, String.class);</span><br><span class="line">      <span class="comment">// 处理返回值</span></span><br><span class="line">      Type typeToken = <span class="keyword">new</span> </span><br><span class="line">TypeToken&lt;XtcpCommonReponse&lt;List&lt;CcsParameter&gt;&gt;&gt;()&#123;&#125;.getType();</span><br><span class="line">      XtcpCommonReponse&lt;List&lt;CcsParameter&gt;&gt; response = <span class="keyword">new</span> Gson().fromJson(res, typeToken);</span><br><span class="line">      List&lt;CcsParameter&gt; parameterList = response.getData();</span><br></pre></td></tr></table></figure>

<h3 id="5-基于Feign实现服务间调用"><a href="#5-基于Feign实现服务间调用" class="headerlink" title="5. 基于Feign实现服务间调用(*)"></a>5. 基于Feign实现服务间调用(*)</h3><p>Spring Cloud Feign是一套基于Netflix Feign实现的<strong>声明式</strong>服务调用客户端，只需要通过创建接口并用注解来配置它既可完成对Web服务接口的绑定。同时还整合了Ribbon和Eureka来提供均衡负载的HTTP客户端实现</p>
<p>另外，Feign同时整合了Hystrix功能，支持服务容错保护</p>
<h4 id="1-pom依赖-3"><a href="#1-pom依赖-3" class="headerlink" title="1). pom依赖"></a>1). pom依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="2-启动类注解-2"><a href="#2-启动类注解-2" class="headerlink" title="2). 启动类注解"></a>2). 启动类注解</h4><p>通过在启动类上添加注解<code>@EnableFeignClients</code>，开启扫描Spring Cloud Feign客户端的功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplicationpublic</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;       </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;            </span><br><span class="line">    <span class="keyword">new</span> SpringApplicationBuilder(Application.class).web(<span class="keyword">true</span>).run(args);     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-创建Feign的客户端接口定义"><a href="#3-创建Feign的客户端接口定义" class="headerlink" title="3). 创建Feign的客户端接口定义"></a>3). 创建Feign的客户端接口定义</h4><p>Feign提供的是声明式的服务绑定功能，即使用<code>@FeignClient</code>注解即可实现对服务的绑定</p>
<ul>
<li><strong>构造Feign客户端</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过注解将该接口与门户后端服务进行绑定【服务名不区分大小写】</span></span><br><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"dyportalserver"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DypotalClient</span> </span>&#123;    </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用mvc注解绑定具体的REST接口【不带参数】</span></span><br><span class="line">     <span class="meta">@PostMapping</span>(<span class="string">"dyportalserver/UserInfoController/getCloudType"</span>) </span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">getCloudType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用mvc注解绑定具体的REST接口【带参数】</span></span><br><span class="line">     <span class="meta">@PostMapping</span>(<span class="string">"dyportalserver/ParameterController/getParameter"</span>) </span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">getParameter</span><span class="params">(@RequestHeader(<span class="string">"tenantId"</span>)</span> String tenantId, @<span class="title">RequestHeader</span><span class="params">(<span class="string">"userId"</span>)</span> String userId, @<span class="title">RequestHeader</span><span class="params">(<span class="string">"token"</span>)</span> String token, @<span class="title">RequestParam</span><span class="params">(<span class="string">"parameterCode"</span>)</span> String parameterCode)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>调用Feign客户端</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注入Feign客户端</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> FeignClientUtil feignClientUtil;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getCloudTypeFeign</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   String res = feignClientUtil.getCloudType();</span><br><span class="line">   Type typeToken = <span class="keyword">new</span> TypeToken&lt;XtcpCommonReponse&lt;CloudType&gt;&gt;()&#123;&#125;.getType();</span><br><span class="line">   XtcpCommonReponse&lt;CloudType&gt; response = <span class="keyword">new</span> Gson().fromJson(res, typeToken);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getParameterFeign</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String res = feignClientUtil.getParameter(<span class="string">"dayang.com"</span>, <span class="string">"admin"</span>, <span class="string">"token"</span>, <span class="string">"PUB_CRECAS"</span>);</span><br><span class="line">    Type typeToken = <span class="keyword">new</span> TypeToken&lt;XtcpCommonReponse&lt;List&lt;CcsParameter&gt;&gt;&gt;()&#123;&#125;.getType();</span><br><span class="line">    XtcpCommonReponse&lt;List&lt;CcsParameter&gt;&gt; response = <span class="keyword">new</span> Gson().fromJson(res, typeToken);</span><br><span class="line">    List&lt;CcsParameter&gt; parameterList = response.getData();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
        <tag>Eureka</tag>
        <tag>Feign</tag>
        <tag>Ribbon</tag>
        <tag>微服务</tag>
      </tags>
  </entry>
</search>
